{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0;\n// proto-over-HTTP request encoding and decoding\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst googleError_1 = require(\"./googleError\");\nconst transcoding_1 = require(\"./transcoding\");\nif (!(0, featureDetection_1.hasTextEncoder)() || !(0, featureDetection_1.hasTextDecoder)()) {\n  require('fast-text-encoding');\n}\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message, {\n    numericEnums\n  });\n  if (!json) {\n    throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n  }\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n  }\n  const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n  if (!transcoded) {\n    throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n  }\n  // If numeric enums feature is requested, add extra parameter to the query string\n  if (numericEnums) {\n    transcoded.queryString = (transcoded.queryString ? '&' : '') + '$alt=json%3Benum-encoding=int';\n  }\n  // Converts httpMethod to method that permitted in standard Fetch API spec\n  // https://fetch.spec.whatwg.org/#methods\n  const method = transcoded.httpMethod.toUpperCase();\n  const body = JSON.stringify(transcoded.data);\n  const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\nexports.encodeRequest = encodeRequest;\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n  if (!ok) {\n    const error = googleError_1.GoogleError.parseHttpError(json);\n    throw error;\n  }\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n  if (!message) {\n    throw new Error(`Received null response from RPC ${rpc.name}`);\n  }\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\nexports.decodeResponse = decodeResponse;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA;AAEA;AACA;AAEA;AACA;AACA;AAEA,IAAI,CAAC,qCAAc,GAAE,IAAI,CAAC,qCAAc,GAAE,EAAE;EAC1CA,OAAO,CAAC,oBAAoB,CAAC;;AAG/B,SAAgBC,aAAa,CAC3BC,GAAoB,EACpBC,QAAgB,EAChBC,WAAmB,EACnBC,WAAmB,EACnBC,OAAW,EACXC,YAAqB;EAErB,MAAMC,OAAO,GAA4B;IACvC,cAAc,EAAE;GACjB;EACD,MAAMC,OAAO,GAAGP,GAAG,CAACQ,mBAAoB,CAACC,UAAU,CAACL,OAAO,CAAC;EAC5D,MAAMM,IAAI,GAAGC,UAAU,CAACC,YAAY,CAACL,OAAO,EAAE;IAC5CF;GACD,CAAC;EACF,IAAI,CAACK,IAAI,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,mCAAmCb,GAAG,CAACc,IAAI,GAAG,CAAC;;EAEjE,IAAI,OAAOJ,IAAI,KAAK,QAAQ,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;IACnD,MAAM,IAAIG,KAAK,CAAC,kBAAkBb,GAAG,CAACc,IAAI,qBAAqB,CAAC;;EAGlE,MAAMG,UAAU,GAAG,2BAAS,EAACP,IAAI,EAAEV,GAAG,CAACkB,aAAa,CAAC;EAErD,IAAI,CAACD,UAAU,EAAE;IACf,MAAM,IAAIJ,KAAK,CACb,iCAAiCM,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,aACnDV,GAAG,CAACc,IACN,EAAE,CACH;;EAGH;EACA,IAAIT,YAAY,EAAE;IAChBY,UAAU,CAACI,WAAW,GACpB,CAACJ,UAAU,CAACI,WAAW,GAAG,GAAG,GAAG,EAAE,IAAI,+BAA+B;;EAGzE;EACA;EACA,MAAMC,MAAM,GAAGL,UAAU,CAACM,UAAU,CAACC,WAAW,EAA2B;EAC3E,MAAMC,IAAI,GAAGN,IAAI,CAACC,SAAS,CAACH,UAAU,CAACS,IAAI,CAAC;EAC5C,MAAMC,GAAG,GAAG,GAAG1B,QAAQ,MAAMC,WAAW,IAAIC,WAAW,IAAIc,UAAU,CAACU,GAAG,CAACC,OAAO,CAC/E,KAAK,EACL,EAAE,CACH,IAAIX,UAAU,CAACI,WAAW,EAAE;EAE7B,OAAO;IACLC,MAAM;IACNK,GAAG;IACHrB,OAAO;IACPmB;GACD;AACH;AArDAI;AAuDA,SAAgBC,cAAc,CAC5B9B,GAAoB,EACpB+B,EAAW,EACXC,QAA8B;EAE9B;EACA,MAAMC,aAAa,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACH,QAAQ,CAAC;EACxD,MAAMtB,IAAI,GAAGS,IAAI,CAACiB,KAAK,CAACH,aAAa,CAAC;EACtC,IAAI,CAACF,EAAE,EAAE;IACP,MAAMM,KAAK,GAAGC,yBAAW,CAACC,cAAc,CAAC7B,IAAI,CAAC;IAC9C,MAAM2B,KAAK;;EAEb,MAAM9B,OAAO,GAAGI,UAAU,CAAC6B,cAAc,CAACxC,GAAG,CAACyC,oBAAqB,EAAE/B,IAAI,CAAC;EAC1E,IAAI,CAACH,OAAO,EAAE;IACZ,MAAM,IAAIM,KAAK,CAAC,mCAAmCb,GAAG,CAACc,IAAI,EAAE,CAAC;;EAEhE,OAAOd,GAAG,CAACyC,oBAAqB,CAACC,QAAQ,CAACnC,OAAO,EAAEoC,iCAAsB,CAAC;AAC5E;AAjBAd","names":["require","encodeRequest","rpc","protocol","servicePath","servicePort","request","numericEnums","headers","message","resolvedRequestType","fromObject","json","serializer","toProto3JSON","Error","name","Array","isArray","transcoded","parsedOptions","JSON","stringify","queryString","method","httpMethod","toUpperCase","body","data","url","replace","exports","decodeResponse","ok","response","decodedString","TextDecoder","decode","parse","error","googleError_1","parseHttpError","fromProto3JSON","resolvedResponseType","toObject","fallback_1"],"sources":["../../src/fallbackRest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}