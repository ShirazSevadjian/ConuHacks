{"ast":null,"code":"/* globals window, HTMLElement */\n\n'use strict';\n\n/**!\n * is\n * the definitive JavaScript type testing library\n *\n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\nvar symbolValueOf;\nif (typeof Symbol === 'function') {\n  symbolValueOf = Symbol.prototype.valueOf;\n}\nvar bigIntValueOf;\nif (typeof BigInt === 'function') {\n  bigIntValueOf = BigInt.prototype.valueOf;\n}\nvar isActualNaN = function (value) {\n  return value !== value;\n};\nvar NON_HOST_TYPES = {\n  'boolean': 1,\n  number: 1,\n  string: 1,\n  undefined: 1\n};\nvar base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\n/**\n * Expose `is`\n */\n\nvar is = {};\n\n/**\n * Test general.\n */\n\n/**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {*} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */\n\nis.a = is.type = function (value, type) {\n  return typeof value === type;\n};\n\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */\n\nis.defined = function (value) {\n  return typeof value !== 'undefined';\n};\n\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */\n\nis.empty = function (value) {\n  var type = toStr.call(value);\n  var key;\n  if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {\n    return value.length === 0;\n  }\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return !value;\n};\n\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {*} value value to test\n * @param {*} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */\n\nis.equal = function equal(value, other) {\n  if (value === other) {\n    return true;\n  }\n  var type = toStr.call(value);\n  var key;\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (type === '[object Array]') {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (key--) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (type === '[object Function]') {\n    return value.prototype === other.prototype;\n  }\n  if (type === '[object Date]') {\n    return value.getTime() === other.getTime();\n  }\n  return false;\n};\n\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {*} value to test\n * @param {*} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */\n\nis.hosted = function (value, host) {\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */\n\nis.instance = is['instanceof'] = function (value, constructor) {\n  return value instanceof constructor;\n};\n\n/**\n * is.nil / is.null\n * Test if `value` is null.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */\n\nis.nil = is['null'] = function (value) {\n  return value === null;\n};\n\n/**\n * is.undef / is.undefined\n * Test if `value` is undefined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */\n\nis.undef = is.undefined = function (value) {\n  return typeof value === 'undefined';\n};\n\n/**\n * Test arguments.\n */\n\n/**\n * is.args\n * Test if `value` is an arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.args = is.arguments = function (value) {\n  var isStandardArguments = toStr.call(value) === '[object Arguments]';\n  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n  return isStandardArguments || isOldArguments;\n};\n\n/**\n * Test array.\n */\n\n/**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */\n\nis.array = Array.isArray || function (value) {\n  return toStr.call(value) === '[object Array]';\n};\n\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */\nis.args.empty = function (value) {\n  return is.args(value) && value.length === 0;\n};\n\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */\nis.array.empty = function (value) {\n  return is.array(value) && value.length === 0;\n};\n\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.arraylike = function (value) {\n  return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\n/**\n * Test boolean.\n */\n\n/**\n * is.bool\n * Test if `value` is a boolean.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */\n\nis.bool = is['boolean'] = function (value) {\n  return toStr.call(value) === '[object Boolean]';\n};\n\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */\n\nis['false'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === false;\n};\n\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */\n\nis['true'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === true;\n};\n\n/**\n * Test date.\n */\n\n/**\n * is.date\n * Test if `value` is a date.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */\n\nis.date = function (value) {\n  return toStr.call(value) === '[object Date]';\n};\n\n/**\n * is.date.valid\n * Test if `value` is a valid date.\n *\n * @param {*} value value to test\n * @returns {Boolean} true if `value` is a valid date, false otherwise\n */\nis.date.valid = function (value) {\n  return is.date(value) && !isNaN(Number(value));\n};\n\n/**\n * Test element.\n */\n\n/**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */\n\nis.element = function (value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1;\n};\n\n/**\n * Test error.\n */\n\n/**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */\n\nis.error = function (value) {\n  return toStr.call(value) === '[object Error]';\n};\n\n/**\n * Test function.\n */\n\n/**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */\n\nis.fn = is['function'] = function (value) {\n  var isAlert = typeof window !== 'undefined' && value === window.alert;\n  if (isAlert) {\n    return true;\n  }\n  var str = toStr.call(value);\n  return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';\n};\n\n/**\n * Test number.\n */\n\n/**\n * is.number\n * Test if `value` is a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */\n\nis.number = function (value) {\n  return toStr.call(value) === '[object Number]';\n};\n\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\n\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */\n\nis.decimal = function (value) {\n  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */\n\nis.divisibleBy = function (value, n) {\n  var isDividendInfinite = is.infinite(value);\n  var isDivisorInfinite = is.infinite(n);\n  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n  return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0;\n};\n\n/**\n * is.integer\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */\n\nis.integer = is['int'] = function (value) {\n  return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */\n\nis.maximum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n  while (--len >= 0) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */\n\nis.minimum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n  while (--len >= 0) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\nis.nan = function (value) {\n  return !is.number(value) || value !== value;\n};\n\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */\n\nis.even = function (value) {\n  return is.infinite(value) || is.number(value) && value === value && value % 2 === 0;\n};\n\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */\n\nis.odd = function (value) {\n  return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0;\n};\n\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.ge = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.gt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */\n\nis.le = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */\n\nis.lt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */\nis.within = function (value, start, finish) {\n  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n    throw new TypeError('all arguments must be numbers');\n  }\n  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n  return isAnyInfinite || value >= start && value <= finish;\n};\n\n/**\n * Test object.\n */\n\n/**\n * is.object\n * Test if `value` is an object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */\nis.object = function (value) {\n  return toStr.call(value) === '[object Object]';\n};\n\n/**\n * is.primitive\n * Test if `value` is a primitive.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a primitive, false otherwise\n * @api public\n */\nis.primitive = function isPrimitive(value) {\n  if (!value) {\n    return true;\n  }\n  if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */\n\nis.hash = function (value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n\n/**\n * Test regexp.\n */\n\n/**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */\n\nis.regexp = function (value) {\n  return toStr.call(value) === '[object RegExp]';\n};\n\n/**\n * Test string.\n */\n\n/**\n * is.string\n * Test if `value` is a string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */\n\nis.string = function (value) {\n  return toStr.call(value) === '[object String]';\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.base64\n * Test if `value` is a valid base64 encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n * @api public\n */\n\nis.base64 = function (value) {\n  return is.string(value) && (!value.length || base64Regex.test(value));\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.hex\n * Test if `value` is a valid hex encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n * @api public\n */\n\nis.hex = function (value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n\n/**\n * is.symbol\n * Test if `value` is an ES6 Symbol\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a Symbol, false otherise\n * @api public\n */\n\nis.symbol = function (value) {\n  return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';\n};\n\n/**\n * is.bigint\n * Test if `value` is an ES-proposed BigInt\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a BigInt, false otherise\n * @api public\n */\n\nis.bigint = function (value) {\n  // eslint-disable-next-line valid-typeof\n  return typeof BigInt === 'function' && toStr.call(value) === '[object BigInt]' && typeof bigIntValueOf.call(value) === 'bigint';\n};\nmodule.exports = is;","map":{"version":3,"names":["objProto","Object","prototype","owns","hasOwnProperty","toStr","toString","symbolValueOf","Symbol","valueOf","bigIntValueOf","BigInt","isActualNaN","value","NON_HOST_TYPES","number","string","undefined","base64Regex","hexRegex","is","a","type","defined","empty","call","key","length","equal","other","getTime","hosted","host","instance","constructor","nil","undef","args","arguments","isStandardArguments","isOldArguments","array","arraylike","object","fn","callee","Array","isArray","bool","isFinite","Boolean","Number","date","valid","isNaN","element","HTMLElement","nodeType","error","isAlert","window","alert","str","infinite","Infinity","decimal","divisibleBy","n","isDividendInfinite","isDivisorInfinite","isNonZeroNumber","integer","maximum","others","TypeError","len","minimum","nan","even","odd","ge","gt","le","lt","within","start","finish","isAnyInfinite","primitive","isPrimitive","hash","setInterval","regexp","base64","test","hex","symbol","bigint","module","exports"],"sources":["/Users/kamilgeagea/Developer/competitions/conuhacks-client/node_modules/is/index.js"],"sourcesContent":["/* globals window, HTMLElement */\n\n'use strict';\n\n/**!\n * is\n * the definitive JavaScript type testing library\n *\n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\nvar symbolValueOf;\nif (typeof Symbol === 'function') {\n  symbolValueOf = Symbol.prototype.valueOf;\n}\nvar bigIntValueOf;\nif (typeof BigInt === 'function') {\n  bigIntValueOf = BigInt.prototype.valueOf;\n}\nvar isActualNaN = function (value) {\n  return value !== value;\n};\nvar NON_HOST_TYPES = {\n  'boolean': 1,\n  number: 1,\n  string: 1,\n  undefined: 1\n};\n\nvar base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\n/**\n * Expose `is`\n */\n\nvar is = {};\n\n/**\n * Test general.\n */\n\n/**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {*} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */\n\nis.a = is.type = function (value, type) {\n  return typeof value === type;\n};\n\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */\n\nis.defined = function (value) {\n  return typeof value !== 'undefined';\n};\n\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */\n\nis.empty = function (value) {\n  var type = toStr.call(value);\n  var key;\n\n  if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {\n    return value.length === 0;\n  }\n\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {*} value value to test\n * @param {*} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */\n\nis.equal = function equal(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (type === '[object Array]') {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (key--) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (type === '[object Function]') {\n    return value.prototype === other.prototype;\n  }\n\n  if (type === '[object Date]') {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {*} value to test\n * @param {*} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */\n\nis.hosted = function (value, host) {\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */\n\nis.instance = is['instanceof'] = function (value, constructor) {\n  return value instanceof constructor;\n};\n\n/**\n * is.nil / is.null\n * Test if `value` is null.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */\n\nis.nil = is['null'] = function (value) {\n  return value === null;\n};\n\n/**\n * is.undef / is.undefined\n * Test if `value` is undefined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */\n\nis.undef = is.undefined = function (value) {\n  return typeof value === 'undefined';\n};\n\n/**\n * Test arguments.\n */\n\n/**\n * is.args\n * Test if `value` is an arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.args = is.arguments = function (value) {\n  var isStandardArguments = toStr.call(value) === '[object Arguments]';\n  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n  return isStandardArguments || isOldArguments;\n};\n\n/**\n * Test array.\n */\n\n/**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */\n\nis.array = Array.isArray || function (value) {\n  return toStr.call(value) === '[object Array]';\n};\n\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */\nis.args.empty = function (value) {\n  return is.args(value) && value.length === 0;\n};\n\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */\nis.array.empty = function (value) {\n  return is.array(value) && value.length === 0;\n};\n\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.arraylike = function (value) {\n  return !!value && !is.bool(value)\n    && owns.call(value, 'length')\n    && isFinite(value.length)\n    && is.number(value.length)\n    && value.length >= 0;\n};\n\n/**\n * Test boolean.\n */\n\n/**\n * is.bool\n * Test if `value` is a boolean.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */\n\nis.bool = is['boolean'] = function (value) {\n  return toStr.call(value) === '[object Boolean]';\n};\n\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */\n\nis['false'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === false;\n};\n\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */\n\nis['true'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === true;\n};\n\n/**\n * Test date.\n */\n\n/**\n * is.date\n * Test if `value` is a date.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */\n\nis.date = function (value) {\n  return toStr.call(value) === '[object Date]';\n};\n\n/**\n * is.date.valid\n * Test if `value` is a valid date.\n *\n * @param {*} value value to test\n * @returns {Boolean} true if `value` is a valid date, false otherwise\n */\nis.date.valid = function (value) {\n  return is.date(value) && !isNaN(Number(value));\n};\n\n/**\n * Test element.\n */\n\n/**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */\n\nis.element = function (value) {\n  return value !== undefined\n    && typeof HTMLElement !== 'undefined'\n    && value instanceof HTMLElement\n    && value.nodeType === 1;\n};\n\n/**\n * Test error.\n */\n\n/**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */\n\nis.error = function (value) {\n  return toStr.call(value) === '[object Error]';\n};\n\n/**\n * Test function.\n */\n\n/**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */\n\nis.fn = is['function'] = function (value) {\n  var isAlert = typeof window !== 'undefined' && value === window.alert;\n  if (isAlert) {\n    return true;\n  }\n  var str = toStr.call(value);\n  return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';\n};\n\n/**\n * Test number.\n */\n\n/**\n * is.number\n * Test if `value` is a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */\n\nis.number = function (value) {\n  return toStr.call(value) === '[object Number]';\n};\n\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\n\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */\n\nis.decimal = function (value) {\n  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */\n\nis.divisibleBy = function (value, n) {\n  var isDividendInfinite = is.infinite(value);\n  var isDivisorInfinite = is.infinite(n);\n  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n  return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);\n};\n\n/**\n * is.integer\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */\n\nis.integer = is['int'] = function (value) {\n  return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */\n\nis.maximum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */\n\nis.minimum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\nis.nan = function (value) {\n  return !is.number(value) || value !== value;\n};\n\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */\n\nis.even = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);\n};\n\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */\n\nis.odd = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);\n};\n\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.ge = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.gt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */\n\nis.le = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */\n\nis.lt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */\nis.within = function (value, start, finish) {\n  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n    throw new TypeError('all arguments must be numbers');\n  }\n  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n  return isAnyInfinite || (value >= start && value <= finish);\n};\n\n/**\n * Test object.\n */\n\n/**\n * is.object\n * Test if `value` is an object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */\nis.object = function (value) {\n  return toStr.call(value) === '[object Object]';\n};\n\n/**\n * is.primitive\n * Test if `value` is a primitive.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a primitive, false otherwise\n * @api public\n */\nis.primitive = function isPrimitive(value) {\n  if (!value) {\n    return true;\n  }\n  if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */\n\nis.hash = function (value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n\n/**\n * Test regexp.\n */\n\n/**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */\n\nis.regexp = function (value) {\n  return toStr.call(value) === '[object RegExp]';\n};\n\n/**\n * Test string.\n */\n\n/**\n * is.string\n * Test if `value` is a string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */\n\nis.string = function (value) {\n  return toStr.call(value) === '[object String]';\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.base64\n * Test if `value` is a valid base64 encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n * @api public\n */\n\nis.base64 = function (value) {\n  return is.string(value) && (!value.length || base64Regex.test(value));\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.hex\n * Test if `value` is a valid hex encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n * @api public\n */\n\nis.hex = function (value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n\n/**\n * is.symbol\n * Test if `value` is an ES6 Symbol\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a Symbol, false otherise\n * @api public\n */\n\nis.symbol = function (value) {\n  return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';\n};\n\n/**\n * is.bigint\n * Test if `value` is an ES-proposed BigInt\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a BigInt, false otherise\n * @api public\n */\n\nis.bigint = function (value) {\n  // eslint-disable-next-line valid-typeof\n  return typeof BigInt === 'function' && toStr.call(value) === '[object BigInt]' && typeof bigIntValueOf.call(value) === 'bigint';\n};\n\nmodule.exports = is;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}