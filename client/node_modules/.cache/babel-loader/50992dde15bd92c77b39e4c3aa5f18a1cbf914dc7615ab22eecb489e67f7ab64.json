{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApiCall = void 0;\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\nconst apiCaller_1 = require(\"./apiCaller\");\nconst retries_1 = require(\"./normalCalls/retries\");\nconst timeout_1 = require(\"./normalCalls/timeout\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback // unused here, used in fallback.ts implementation\n) {\n  // we want to be able to accept both promise resolving to a function and a\n  // function. Currently client librares are only calling this method with a\n  // promise, but it will change.\n  const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func;\n  // the following apiCaller will be used for all calls of this function...\n  const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);\n  return (request, callOptions, callback) => {\n    const thisSettings = settings.merge(callOptions);\n    let currentApiCaller = apiCaller;\n    // special case: if bundling is disabled for this one call,\n    // use default API caller instead\n    if (settings.isBundling && !thisSettings.isBundling) {\n      currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, undefined);\n    }\n    const ongoingCall = currentApiCaller.init(callback);\n    funcPromise.then(func => {\n      var _a;\n      // Initially, the function is just what gRPC server stub contains.\n      func = currentApiCaller.wrap(func);\n      const streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;\n      const retry = thisSettings.retry;\n      if (!streaming && retry && retry.retryCodes && retry.retryCodes.length > 0) {\n        retry.backoffSettings.initialRpcTimeoutMillis = retry.backoffSettings.initialRpcTimeoutMillis || thisSettings.timeout;\n        return (0, retries_1.retryable)(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\n      }\n      return (0, timeout_1.addTimeoutArg)(func, thisSettings.timeout, thisSettings.otherArgs);\n    }).then(apiCall => {\n      // After adding retries / timeouts, the call function becomes simpler:\n      // it only accepts request and callback.\n      currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n    }).catch(err => {\n      currentApiCaller.fail(ongoingCall, err);\n    });\n    // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n    // or to cancel the ongoing call.\n    return currentApiCaller.result(ongoingCall);\n  };\n}\nexports.createApiCall = createApiCall;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;AAIA;AAWA;AACA;AAGA;;;;;;;;;;;;;;;;;;;AAmBA,SAAgBA,aAAa,CAC3BC,IAAkC,EAClCC,QAAsB,EACtBC,UAAuB;AACvB;AACAC,SAAsC,CAAC;AAAA;EAEvC;EACA;EACA;EACA,MAAMC,WAAW,GAAG,OAAOJ,IAAI,KAAK,UAAU,GAAGK,OAAO,CAACC,OAAO,CAACN,IAAI,CAAC,GAAGA,IAAI;EAE7E;EACA,MAAMO,SAAS,GAAG,+BAAe,EAACN,QAAQ,EAAEC,UAAU,CAAC;EAEvD,OAAO,CACLM,OAAoB,EACpBC,WAAyB,EACzBC,QAAsB,KACpB;IACF,MAAMC,YAAY,GAAGV,QAAQ,CAACW,KAAK,CAACH,WAAW,CAAC;IAEhD,IAAII,gBAAgB,GAAGN,SAAS;IAChC;IACA;IACA,IAAIN,QAAQ,CAACa,UAAU,IAAI,CAACH,YAAY,CAACG,UAAU,EAAE;MACnDD,gBAAgB,GAAG,+BAAe,EAACZ,QAAQ,EAAEc,SAAS,CAAC;;IAGzD,MAAMC,WAAW,GAAGH,gBAAgB,CAACI,IAAI,CAACP,QAAQ,CAAC;IACnDN,WAAW,CACRc,IAAI,CAAElB,IAAc,IAAI;;MACvB;MACAA,IAAI,GAAGa,gBAAgB,CAACM,IAAI,CAACnB,IAAI,CAAC;MAElC,MAAMoB,SAAS,GAAG,MAACP,gBAAuC,CAACX,UAAU,0CACjEkB,SAAS;MACb,MAAMC,KAAK,GAAGV,YAAY,CAACU,KAAK;MAChC,IACE,CAACD,SAAS,IACVC,KAAK,IACLA,KAAK,CAACC,UAAU,IAChBD,KAAK,CAACC,UAAU,CAACC,MAAM,GAAG,CAAC,EAC3B;QACAF,KAAK,CAACG,eAAe,CAACC,uBAAuB,GAC3CJ,KAAK,CAACG,eAAe,CAACC,uBAAuB,IAC7Cd,YAAY,CAACe,OAAO;QACtB,OAAO,uBAAS,EACd1B,IAAI,EACJW,YAAY,CAACU,KAAM,EACnBV,YAAY,CAACgB,SAA8B,EAC3ChB,YAAY,CAACiB,OAAO,CACrB;;MAEH,OAAO,2BAAa,EAClB5B,IAAI,EACJW,YAAY,CAACe,OAAO,EACpBf,YAAY,CAACgB,SAA8B,CAC5C;IACH,CAAC,CAAC,CACDT,IAAI,CAAEW,OAA+B,IAAI;MACxC;MACA;MACAhB,gBAAgB,CAACiB,IAAI,CAACD,OAAO,EAAErB,OAAO,EAAEG,YAAY,EAAEK,WAAW,CAAC;IACpE,CAAC,CAAC,CACDe,KAAK,CAACC,GAAG,IAAG;MACXnB,gBAAgB,CAACoB,IAAI,CAACjB,WAAW,EAAEgB,GAAG,CAAC;IACzC,CAAC,CAAC;IAEJ;IACA;IACA,OAAOnB,gBAAgB,CAACqB,MAAM,CAAClB,WAAW,CAAC;EAC7C,CAAC;AACH;AAzEAmB","names":["createApiCall","func","settings","descriptor","_fallback","funcPromise","Promise","resolve","apiCaller","request","callOptions","callback","thisSettings","merge","currentApiCaller","isBundling","undefined","ongoingCall","init","then","wrap","streaming","retry","retryCodes","length","backoffSettings","initialRpcTimeoutMillis","timeout","otherArgs","apiName","apiCall","call","catch","err","fail","result","exports"],"sources":["../../src/createApiCall.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}