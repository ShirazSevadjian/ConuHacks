{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = require(\"./gax\");\nconst warnings_1 = require(\"./warnings\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./locations_client_config.json\");\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n  /**\n   * Construct an instance of LocationsClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    this.gaxGrpc = gaxGrpc;\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = gaxGrpc.auth;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations')\n    };\n    // Put together the default options sent with requests.\n    this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = warnings_1.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    var _this = this;\n    // If the client stub promise is already initialized, return immediately.\n    if (this.locationsStub) {\n      return this.locationsStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.location.Locations.\n    this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.location.Locations') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const locationsStubMethods = ['listLocations', 'getLocation'];\n    for (const methodName of locationsStubMethods) {\n      const callPromise = this.locationsStub.then(stub => function () {\n        if (_this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n      const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.locationsStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getLocation(request);\n   */\n  getLocation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listLocationsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listLocations(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listLocations(request, options, callback);\n  }\n  /**\n   * Equivalent to `listLocations`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n  listLocationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    this.initialize();\n    if (!this._terminated) {\n      return this.locationsStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.LocationsClient = LocationsClient;","map":{"version":3,"mappings":"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","names":["version","require","LocationsClient","constructor","gaxGrpc","opts","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","Object","assign","scopes","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","jsonProtos","descriptors","listLocations","pageDescriptor_1","_defaults","constructSettings","gapicConfig","join","innerApiCalls","warn","warnings_1","initialize","locationsStub","createStub","lookupService","google","cloud","location","Locations","locationsStubMethods","methodName","callPromise","then","stub","_terminated","Promise","reject","func","args","apply","err","descriptor","undefined","apiCall","getProjectId","callback","getLocation","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","listLocationsAsync","callSettings","gax","CallSettings","asyncIterate","close","resolve","exports"],"sources":["../../src/locationService.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}