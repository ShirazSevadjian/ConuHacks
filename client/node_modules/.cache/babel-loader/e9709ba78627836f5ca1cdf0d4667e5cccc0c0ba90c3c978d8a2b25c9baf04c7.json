{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nconst impersonated_1 = require(\"./impersonated\");\nconst externalclient_1 = require(\"./externalclient\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nconst GoogleAuthExceptionMessages = {\n  NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started'\n};\nclass GoogleAuth {\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined;\n    // To save the contents of the JSON credential file\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.cachedCredential = opts.authClient || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  }\n  // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n  // GAPIC client libraries should always use self-signed JWTs. The following\n  // variables are set on the JWT client in order to indicate the type of library,\n  // and sign the JWT with the correct audience and scopes (if not supplied).\n  setGapicJWTValues(client) {\n    client.defaultServicePath = this.defaultServicePath;\n    client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n    client.defaultScopes = this.defaultScopes;\n  }\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n  /**\n   * A temporary method for internal `getProjectId` usages where `null` is\n   * acceptable. In a future major release, `getProjectId` should return `null`\n   * (as the `Promise<string | null>` base signature describes) and this private\n   * method should be removed.\n   *\n   * @returns Promise that resolves with project id (or `null`)\n   */\n  async getProjectIdOptional() {\n    try {\n      return await this.getProjectId();\n    } catch (e) {\n      if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n  /*\n   * A private method for finding and caching a projectId.\n   *\n   * Supports environments in order of precedence:\n   * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n   * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n   * - Cloud SDK: `gcloud config config-helper --format json`\n   * - GCE project ID from metadata server\n   *\n   * @returns projectId\n   */\n  async findAndCacheProjectId() {\n    let projectId = null;\n    projectId || (projectId = await this.getProductionProjectId());\n    projectId || (projectId = await this.getFileProjectId());\n    projectId || (projectId = await this.getDefaultServiceProjectId());\n    projectId || (projectId = await this.getGCEProjectId());\n    projectId || (projectId = await this.getExternalAccountClientProjectId());\n    if (projectId) {\n      this._cachedProjectId = projectId;\n      return projectId;\n    } else {\n      throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n    }\n  }\n  async getProjectIdAsync() {\n    if (this._cachedProjectId) {\n      return this._cachedProjectId;\n    }\n    if (!this._findProjectIdPromise) {\n      this._findProjectIdPromise = this.findAndCacheProjectId();\n    }\n    return this._findProjectIdPromise;\n  }\n  /**\n   * @returns Any scopes (user-specified or default scopes specified by the\n   *   client library) that need to be set on the current Auth client.\n   */\n  getAnyScopes() {\n    return this.scopes || this.defaultScopes;\n  }\n  getApplicationDefault() {\n    let optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : undefined;\n    let options;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n  async getApplicationDefaultAsync() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // If we've already got a cached credential, return it.\n    // This will also preserve one's configured quota project, in case they\n    // set one directly on the credential previously.\n    if (this.cachedCredential) {\n      return await this.prepareAndCacheADC(this.cachedCredential);\n    }\n    // Since this is a 'new' ADC to cache we will use the environment variable\n    // if it's available. We prefer this value over the value from ADC.\n    const quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'];\n    let credential;\n    // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local\n    // developer scenarios.\n    credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.scopes = this.scopes;\n      } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n        credential.scopes = this.getAnyScopes();\n      }\n      return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n    }\n    // Look in the well-known credential file location.\n    credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.scopes = this.scopes;\n      } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n        credential.scopes = this.getAnyScopes();\n      }\n      return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n    }\n    // Determine if we're running on GCE.\n    let isGCE;\n    try {\n      isGCE = await this._checkIsGCE();\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Unexpected error determining execution environment: ${e.message}`;\n      }\n      throw e;\n    }\n    if (!isGCE) {\n      // We failed to find the default credentials. Bail out with an error.\n      throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n    }\n    // For GCE, just return a default ComputeClient. It will take care of\n    // the rest.\n    options.scopes = this.getAnyScopes();\n    return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n  }\n  async prepareAndCacheADC(credential, quotaProjectIdOverride) {\n    const projectId = await this.getProjectIdOptional();\n    if (quotaProjectIdOverride) {\n      credential.quotaProjectId = quotaProjectIdOverride;\n    }\n    this.cachedCredential = credential;\n    return {\n      credential,\n      projectId\n    };\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n  async _checkIsGCE() {\n    if (this.checkIsGCE === undefined) {\n      this.checkIsGCE = await gcpMetadata.isAvailable();\n    }\n    return this.checkIsGCE;\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n    if (!credentialsPath || credentialsPath.length === 0) {\n      return null;\n    }\n    try {\n      return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n      }\n      throw e;\n    }\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    // First, figure out the location of the file, depending upon the OS type.\n    let location = null;\n    if (this._isWindows()) {\n      // Windows\n      location = process.env['APPDATA'];\n    } else {\n      // Linux or Mac\n      const home = process.env['HOME'];\n      if (home) {\n        location = path.join(home, '.config');\n      }\n    }\n    // If we found the root path, expand it.\n    if (location) {\n      location = path.join(location, 'gcloud', 'application_default_credentials.json');\n      if (!fs.existsSync(location)) {\n        location = null;\n      }\n    }\n    // The file does not exist.\n    if (!location) {\n      return null;\n    }\n    // The file seems to exist. Try to use it.\n    const client = await this._getApplicationCredentialsFromFilePath(location, options);\n    return client;\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n  async _getApplicationCredentialsFromFilePath(filePath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Make sure the path looks like a string.\n    if (!filePath || filePath.length === 0) {\n      throw new Error('The file path is invalid.');\n    }\n    // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      filePath = fs.realpathSync(filePath);\n      if (!fs.lstatSync(filePath).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n      }\n      throw err;\n    }\n    // Now open a read stream on the file, and parse it.\n    const readStream = fs.createReadStream(filePath);\n    return this.fromStream(readStream, options);\n  }\n  /**\n   * Create a credentials instance using a given impersonated input options.\n   * @param json The impersonated input object.\n   * @returns JWT or UserRefresh Client with data\n   */\n  fromImpersonatedJSON(json) {\n    var _a, _b, _c, _d;\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n    }\n    if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n      throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n    }\n    if (!json.source_credentials) {\n      throw new Error('The incoming JSON object does not contain a source_credentials field');\n    }\n    if (!json.service_account_impersonation_url) {\n      throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n    }\n    // Create source client for impersonation\n    const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);\n    // Extreact service account from service_account_impersonation_url\n    const targetPrincipal = (_b = (_a = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;\n    if (!targetPrincipal) {\n      throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n    }\n    const targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];\n    const client = new impersonated_1.Impersonated({\n      delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],\n      sourceClient: sourceClient,\n      targetPrincipal: targetPrincipal,\n      targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]\n    });\n    return client;\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n  fromJSON(json, options) {\n    let client;\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n    options = options || {};\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n      client.fromJSON(json);\n    } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n      client = this.fromImpersonatedJSON(json);\n    } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n      client.scopes = this.getAnyScopes();\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      this.setGapicJWTValues(client);\n      client.fromJSON(json);\n    }\n    return client;\n  }\n  /**\n   * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n   * object used to instantiate and the client.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n  _cacheClientFromJSON(json, options) {\n    let client;\n    // create either a UserRefreshClient or JWT client.\n    options = options || {};\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n      client.fromJSON(json);\n    } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n      client = this.fromImpersonatedJSON(json);\n    } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n      client.scopes = this.getAnyScopes();\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      this.setGapicJWTValues(client);\n      client.fromJSON(json);\n    }\n    // cache both raw data used to instantiate client and client itself.\n    this.jsonContent = json;\n    this.cachedCredential = client;\n    return client;\n  }\n  fromStream(inputStream) {\n    let optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          try {\n            const data = JSON.parse(s);\n            const r = this._cacheClientFromJSON(data, options);\n            return resolve(r);\n          } catch (err) {\n            // If we failed parsing this.keyFileName, assume that it\n            // is a PEM or p12 certificate:\n            if (!this.keyFilename) throw err;\n            const client = new jwtclient_1.JWT({\n              ...this.clientOptions,\n              keyFile: this.keyFilename\n            });\n            this.cachedCredential = client;\n            this.setGapicJWTValues(client);\n            return resolve(client);\n          }\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n  _isWindows() {\n    const sys = os.platform();\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n  async getDefaultServiceProjectId() {\n    return new Promise(resolve => {\n      (0, child_process_1.exec)('gcloud config config-helper --format json', (err, stdout) => {\n        if (!err && stdout) {\n          try {\n            const projectId = JSON.parse(stdout).configuration.properties.core.project;\n            resolve(projectId);\n            return;\n          } catch (e) {\n            // ignore errors\n          }\n        }\n        resolve(null);\n      });\n    });\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n  async getFileProjectId() {\n    if (this.cachedCredential) {\n      // Try to read the project ID from the cached credentials file\n      return this.cachedCredential.projectId;\n    }\n    // Ensure the projectId is loaded from the keyFile if available.\n    if (this.keyFilename) {\n      const creds = await this.getClient();\n      if (creds && creds.projectId) {\n        return creds.projectId;\n      }\n    }\n    // Try to load a credentials file and read its project ID\n    const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n    if (r) {\n      return r.projectId;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets the project ID from external account client if available.\n   */\n  async getExternalAccountClientProjectId() {\n    if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      return null;\n    }\n    const creds = await this.getClient();\n    // Do not suppress the underlying error, as the error could contain helpful\n    // information for debugging and fixing. This is especially true for\n    // external account creds as in order to get the project ID, the following\n    // operations have to succeed:\n    // 1. Valid credentials file should be supplied.\n    // 2. Ability to retrieve access tokens from STS token exchange API.\n    // 3. Ability to exchange for service account impersonated credentials (if\n    //    enabled).\n    // 4. Ability to get project info using the access token from step 2 or 3.\n    // Without surfacing the error, it is harder for developers to determine\n    // which step went wrong.\n    return await creds.getProjectId();\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n  async getGCEProjectId() {\n    try {\n      const r = await gcpMetadata.project('project-id');\n      return r;\n    } catch (e) {\n      // Ignore any errors\n      return null;\n    }\n  }\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n  async getCredentialsAsync() {\n    const client = await this.getClient();\n    if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n      const serviceAccountEmail = client.getServiceAccountEmail();\n      if (serviceAccountEmail) {\n        return {\n          client_email: serviceAccountEmail\n        };\n      }\n    }\n    if (this.jsonContent) {\n      const credential = {\n        client_email: this.jsonContent.client_email,\n        private_key: this.jsonContent.private_key\n      };\n      return credential;\n    }\n    const isGCE = await this._checkIsGCE();\n    if (!isGCE) {\n      throw new Error('Unknown error.');\n    }\n    // For GCE, return the service account details from the metadata server\n    // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n    // The GCF metadata server doesn't respect querystring params if this / is\n    // not included.\n    const data = await gcpMetadata.instance({\n      property: 'service-accounts/',\n      params: {\n        recursive: 'true'\n      }\n    });\n    if (!data || !data.default || !data.default.email) {\n      throw new Error('Failure from metadata server.');\n    }\n    return {\n      client_email: data.default.email\n    };\n  }\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n  async getClient() {\n    if (!this.cachedCredential) {\n      if (this.jsonContent) {\n        this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n      } else if (this.keyFilename) {\n        const filePath = path.resolve(this.keyFilename);\n        const stream = fs.createReadStream(filePath);\n        await this.fromStreamAsync(stream, this.clientOptions);\n      } else {\n        await this.getApplicationDefaultAsync(this.clientOptions);\n      }\n    }\n    return this.cachedCredential;\n  }\n  /**\n   * Creates a client which will fetch an ID token for authorization.\n   * @param targetAudience the audience for the fetched ID token.\n   * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n   */\n  async getIdTokenClient(targetAudience) {\n    const client = await this.getClient();\n    if (!('fetchIdToken' in client)) {\n      throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n    }\n    return new idtokenclient_1.IdTokenClient({\n      targetAudience,\n      idTokenProvider: client\n    });\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n  async getAccessToken() {\n    const client = await this.getClient();\n    return (await client.getAccessToken()).token;\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n  async getRequestHeaders(url) {\n    const client = await this.getClient();\n    return client.getRequestHeaders(url);\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n  async authorizeRequest(opts) {\n    opts = opts || {};\n    const url = opts.url || opts.uri;\n    const client = await this.getClient();\n    const headers = await client.getRequestHeaders(url);\n    opts.headers = Object.assign(opts.headers || {}, headers);\n    return opts;\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(opts) {\n    const client = await this.getClient();\n    return client.request(opts);\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n  getEnv() {\n    return (0, envDetect_1.getEnv)();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n  async sign(data) {\n    const client = await this.getClient();\n    const crypto = (0, crypto_1.createCrypto)();\n    if (client instanceof jwtclient_1.JWT && client.key) {\n      const sign = await crypto.sign(client.key, data);\n      return sign;\n    }\n    const creds = await this.getCredentials();\n    if (!creds.client_email) {\n      throw new Error('Cannot sign data without `client_email`.');\n    }\n    return this.signBlob(crypto, creds.client_email, data);\n  }\n  async signBlob(crypto, emailOrUniqueId, data) {\n    const url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' + `${emailOrUniqueId}:signBlob`;\n    const res = await this.request({\n      method: 'POST',\n      url,\n      data: {\n        payload: crypto.encodeBase64StringUtf8(data)\n      }\n    });\n    return res.data.signedBlob;\n  }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","impersonated_1","externalclient_1","baseexternalclient_1","GoogleAuthExceptionMessages","NO_PROJECT_ID_FOUND","constructor","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","authClient","keyFilename","keyFile","scopes","credentials","clientOptions","isGCE","setGapicJWTValues","client","defaultServicePath","useJWTAccessWithScope","defaultScopes","getProjectId","callback","getProjectIdAsync","then","r","getProjectIdOptional","e","Error","message","findAndCacheProjectId","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","getExternalAccountClientProjectId","_findProjectIdPromise","getAnyScopes","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","prepareAndCacheADC","quotaProjectIdOverride","process","env","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","BaseExternalAccountClient","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","Compute","quotaProjectId","isAvailable","credentialsPath","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","filePath","realpathSync","lstatSync","isFile","err","readStream","createReadStream","fromStream","fromImpersonatedJSON","json","_a","_b","_c","_d","type","IMPERSONATED_ACCOUNT_TYPE","source_credentials","service_account_impersonation_url","sourceClient","UserRefreshClient","client_id","client_secret","refresh_token","targetPrincipal","exec","groups","target","RangeError","targetScopes","Impersonated","delegates","Array","isArray","fromJSON","EXTERNAL_ACCOUNT_TYPE","ExternalAccountClient","_cacheClientFromJSON","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","stdout","configuration","properties","core","project","creds","getClient","getCredentials","getCredentialsAsync","serviceAccountEmail","getServiceAccountEmail","client_email","private_key","instance","property","params","recursive","default","email","stream","getIdTokenClient","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","signBlob","emailOrUniqueId","res","method","payload","encodeBase64StringUtf8","signedBlob","DefaultTransporter"],"sources":["/Users/kamilgeagea/Developer/competitions/conuhacks-client/node_modules/google-auth-library/build/src/auth/googleauth.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nconst impersonated_1 = require(\"./impersonated\");\nconst externalclient_1 = require(\"./externalclient\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nconst GoogleAuthExceptionMessages = {\n    NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' +\n        'To learn more about authentication and Google APIs, visit: \\n' +\n        'https://cloud.google.com/docs/authentication/getting-started',\n};\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.cachedCredential = opts.authClient || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */\n    async getProjectIdOptional() {\n        try {\n            return await this.getProjectId();\n        }\n        catch (e) {\n            if (e instanceof Error &&\n                e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n                return null;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /*\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */\n    async findAndCacheProjectId() {\n        let projectId = null;\n        projectId || (projectId = await this.getProductionProjectId());\n        projectId || (projectId = await this.getFileProjectId());\n        projectId || (projectId = await this.getDefaultServiceProjectId());\n        projectId || (projectId = await this.getGCEProjectId());\n        projectId || (projectId = await this.getExternalAccountClientProjectId());\n        if (projectId) {\n            this._cachedProjectId = projectId;\n            return projectId;\n        }\n        else {\n            throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n        }\n    }\n    async getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return this._cachedProjectId;\n        }\n        if (!this._findProjectIdPromise) {\n            this._findProjectIdPromise = this.findAndCacheProjectId();\n        }\n        return this._findProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n    getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, return it.\n        // This will also preserve one's configured quota project, in case they\n        // set one directly on the credential previously.\n        if (this.cachedCredential) {\n            return await this.prepareAndCacheADC(this.cachedCredential);\n        }\n        // Since this is a 'new' ADC to cache we will use the environment variable\n        // if it's available. We prefer this value over the value from ADC.\n        const quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'];\n        let credential;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential =\n            await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unexpected error determining execution environment: ${e.message}`;\n            }\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.getAnyScopes();\n        return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n    }\n    async prepareAndCacheADC(credential, quotaProjectIdOverride) {\n        const projectId = await this.getProjectIdOptional();\n        if (quotaProjectIdOverride) {\n            credential.quotaProjectId = quotaProjectIdOverride;\n        }\n        this.cachedCredential = credential;\n        return { credential, projectId };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromImpersonatedJSON(json) {\n        var _a, _b, _c, _d;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n        }\n        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n        }\n        if (!json.source_credentials) {\n            throw new Error('The incoming JSON object does not contain a source_credentials field');\n        }\n        if (!json.service_account_impersonation_url) {\n            throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n        }\n        // Create source client for impersonation\n        const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);\n        // Extreact service account from service_account_impersonation_url\n        const targetPrincipal = (_b = (_a = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;\n        if (!targetPrincipal) {\n            throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n        }\n        const targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];\n        const client = new impersonated_1.Impersonated({\n            delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],\n            sourceClient: sourceClient,\n            targetPrincipal: targetPrincipal,\n            targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes],\n        });\n        return client;\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            (0, child_process_1.exec)('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */\n    async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        const client = await this.getClient();\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n            const serviceAccountEmail = client.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                return { client_email: serviceAccountEmail };\n            }\n        }\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient() {\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = (0, crypto_1.createCrypto)();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        return this.signBlob(crypto, creds.client_email, data);\n    }\n    async signBlob(crypto, emailOrUniqueId, data) {\n        const url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' +\n            `${emailOrUniqueId}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}