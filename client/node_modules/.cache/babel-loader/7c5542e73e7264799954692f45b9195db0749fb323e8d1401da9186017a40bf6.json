{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operation = exports.Operation = void 0;\nconst events_1 = require(\"events\");\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\nconst operationProtos = require(\"../../protos/operations\");\nclass Operation extends events_1.EventEmitter {\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.name = this.latestResponse.name;\n    this.done = this.latestResponse.done;\n    this.error = this.latestResponse.error;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n    this._unpackResponse(grpcOp);\n    this._listenForEvents();\n    this._callOptions = callOptions;\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n    cancelRequest.name = this.latestResponse.name;\n    return operationsClient.cancelOperation(cancelRequest);\n  }\n  getOperation(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    function promisifyResponse() {\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n      return;\n    }\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n      return promisifyResponse();\n    }\n    const request = new operationProtos.google.longrunning.GetOperationRequest();\n    request.name = this.latestResponse.name;\n    this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n    const noCallbackPromise = this.currentCallPromise_.then(responses => {\n      self.latestResponse = responses[0];\n      self._unpackResponse(responses[0], callback);\n      return promisifyResponse();\n    }, err => {\n      if (callback) {\n        callback(err);\n        return;\n      }\n      return Promise.reject(err);\n    });\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n  _unpackResponse(op, callback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response;\n    let metadata;\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new googleError_1.GoogleError(op.error.message);\n        error.code = op.error.code;\n        this.error = error;\n        if (callback) {\n          callback(error);\n        }\n        return;\n      }\n      if (responseDecoder && op.response) {\n        this.response = op.response;\n        response = responseDecoder(op.response.value);\n        this.result = response;\n        this.done = true;\n      }\n    }\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n    if (callback) {\n      callback(null, response, metadata, op);\n    }\n  }\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n    let previousMetadataBytes;\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function emit(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      self.emit(event, ...args);\n    }\n    // Helper function to replace nodejs buffer's equals()\n    function arrayEquals(a, b) {\n      if (a.byteLength !== b.byteLength) {\n        return false;\n      }\n      for (let i = 0; i < a.byteLength; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n      if (now.getTime() >= deadline) {\n        const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n        error.code = status_1.Status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n        if (!result) {\n          if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse.metadata.value;\n          }\n          // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Some APIs just use this for the normal completion\n          // (e.g. nodejs-contact-center-insights), so let's just return\n          // an empty response in this case.\n          if (rawResponse.done) {\n            setImmediate(emit, 'complete', {}, metadata, rawResponse);\n            return;\n          }\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n    retry();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n        resolve([result, metadata, rawResponse]);\n      });\n    });\n  }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\nexports.operation = operation;","map":{"version":3,"mappings":"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","names":["Operation","events_1","constructor","grpcOp","longrunningDescriptor","backoffSettings","callOptions","completeListeners","hasActiveListeners","latestResponse","name","done","error","result","metadata","_unpackResponse","_listenForEvents","_callOptions","on","event","startPolling_","cancel","currentCallPromise_","operationsClient","cancelRequest","operationProtos","google","longrunning","CancelOperationRequest","cancelOperation","getOperation","callback","self","promisifyResponse","Promise","resolve","reject","googleError_1","message","code","request","GetOperationRequest","getOperationInternal","noCallbackPromise","then","responses","err","op","responseDecoder","metadataDecoder","response","value","now","Date","delayMult","retryDelayMultiplier","maxDelay","maxRetryDelayMillis","delay","initialRetryDelayMillis","deadline","Infinity","totalTimeoutMillis","getTime","previousMetadataBytes","emit","args","arrayEquals","a","b","byteLength","i","retry","status_1","DEADLINE_EXCEEDED","setImmediate","rawResponse","setTimeout","Math","min","promise","exports","operation"],"sources":["../../../src/longRunningCalls/longrunning.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}