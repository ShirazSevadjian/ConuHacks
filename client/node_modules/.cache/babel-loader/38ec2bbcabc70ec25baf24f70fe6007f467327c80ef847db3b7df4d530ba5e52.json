{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageAnnotatorClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p1beta1\n */\nclass ImageAnnotatorClient {\n  /**\n   * Construct an instance of ImageAnnotatorClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean | \"rest\"} [options.fallback] - Use HTTP fallback mode.\n   *     Pass \"rest\" to use HTTP/1.1 REST API instead of gRPC.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new ImageAnnotatorClient({fallback: 'rest'}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = staticMembers.servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p1beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    var _this = this;\n    // If the client stub promise is already initialized, return immediately.\n    if (this.imageAnnotatorStub) {\n      return this.imageAnnotatorStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.vision.v1p1beta1.ImageAnnotator.\n    this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.vision.v1p1beta1.ImageAnnotator') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.vision.v1p1beta1.ImageAnnotator, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const imageAnnotatorStubMethods = ['batchAnnotateImages'];\n    for (const methodName of imageAnnotatorStubMethods) {\n      const callPromise = this.imageAnnotatorStub.then(stub => function () {\n        if (_this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.imageAnnotatorStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-vision'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  batchAnnotateImages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    if (this.imageAnnotatorStub && !this._terminated) {\n      return this.imageAnnotatorStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.ImageAnnotatorClient = ImageAnnotatorClient;","map":{"version":3,"mappings":"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","names":["version","require","ImageAnnotatorClient","constructor","opts","gaxInstance","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","Object","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","jsonProtos","_defaults","constructSettings","gapicConfig","join","innerApiCalls","warn","initialize","imageAnnotatorStub","createStub","lookupService","google","cloud","vision","v1p1beta1","ImageAnnotator","imageAnnotatorStubMethods","methodName","callPromise","then","stub","_terminated","Promise","reject","func","args","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","batchAnnotateImages","request","optionsOrCallback","options","otherArgs","headers","close","resolve","exports"],"sources":["../../../src/v1p1beta1/image_annotator_client.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}