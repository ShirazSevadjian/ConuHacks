{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n    return new call_1.OngoingCallPromise();\n  }\n  wrap(func) {\n    return func;\n  }\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n  _wrapOperation(apiCall, settings, argument, callback) {\n    let backoffSettings = settings.longrunning;\n    if (!backoffSettings) {\n      backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n    }\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, null, rawResponse);\n        return;\n      }\n      const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n  result(canceller) {\n    return canceller.promise;\n  }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAkBA;AACA;AAOA;AAIA,MAAaA,oBAAoB;EAE/B;;;;;;;;;EASAC,YAAYC,qBAA4C;IACtD,IAAI,CAACA,qBAAqB,GAAGA,qBAAqB;EACpD;EAEAC,IAAI,CAACC,QAAsB;IACzB,IAAIA,QAAQ,EAAE;MACZ,OAAO,IAAIC,kBAAW,CAACD,QAAQ,CAAC;;IAElC,OAAO,IAAIC,yBAAkB,EAAE;EACjC;EAEAC,IAAI,CAACC,IAAc;IACjB,OAAOA,IAAI;EACb;EAEAC,IAAI,CACFC,OAA+B,EAC/BC,QAAY,EACZC,QAAqB,EACrBC,SAA6B;IAE7BA,SAAS,CAACJ,IAAI,CAAC,CAACE,QAAQ,EAAEN,QAAQ,KAAI;MACpC,OAAO,IAAI,CAACS,cAAc,CAACJ,OAAO,EAAEE,QAAQ,EAAED,QAAQ,EAAEN,QAAQ,CAAC;IACnE,CAAC,EAAEM,QAAQ,CAAC;EACd;EAEQG,cAAc,CACpBJ,OAA+B,EAC/BE,QAAqB,EACrBD,QAAY,EACZN,QAAqB;IAErB,IAAIU,eAAe,GAAgCH,QAAQ,CAACI,WAAW;IACvE,IAAI,CAACD,eAAe,EAAE;MACpBA,eAAe,GAAG,sCAA4B,GAAE;;IAGlD,MAAMZ,qBAAqB,GAAG,IAAI,CAACA,qBAAqB;IACxD,OAAOO,OAAO,CACZC,QAAQ,EACR,CAACM,GAAuB,EAAEC,WAAkC,KAAI;MAC9D,IAAID,GAAG,EAAE;QACPZ,QAAQ,CAACY,GAAG,EAAE,IAAI,EAAE,IAAI,EAAEC,WAAwB,CAAC;QACnD;;MAGF,MAAMC,SAAS,GAAG,IAAIC,uBAAS,CAC7BF,WAA2D,EAC3Df,qBAAqB,EACrBY,eAAgB,EAChBH,QAAQ,CACT;MAEDP,QAAQ,CAAC,IAAI,EAAEc,SAAS,EAAED,WAAW,CAAC;IACxC,CAAC,CACF;EACH;EAEAG,IAAI,CAACR,SAA6B,EAAEI,GAAgB;IAClDJ,SAAS,CAACR,QAAS,CAACY,GAAG,CAAC;EAC1B;EAEAK,MAAM,CAACT,SAA6B;IAClC,OAAOA,SAAS,CAACU,OAAO;EAC1B;;AA3EFC","names":["LongrunningApiCaller","constructor","longrunningDescriptor","init","callback","call_1","wrap","func","call","apiCall","argument","settings","canceller","_wrapOperation","backoffSettings","longrunning","err","rawResponse","operation","longrunning_1","fail","result","promise","exports"],"sources":["../../../src/longRunningCalls/longRunningApiCaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}