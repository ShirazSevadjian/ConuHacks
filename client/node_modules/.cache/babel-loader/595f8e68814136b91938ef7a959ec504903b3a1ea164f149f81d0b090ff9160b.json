{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.createApiCall = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.lro = exports.GrpcClient = exports.defaultToObjectOptions = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nconst objectHash = require(\"object-hash\");\nconst protobuf = require(\"protobufjs\");\nexports.protobuf = protobuf;\nconst gax = require(\"./gax\");\nconst routingHeader = require(\"./routingHeader\");\nexports.routingHeader = routingHeader;\nconst status_1 = require(\"./status\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst operationsClient_1 = require(\"./operationsClient\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst fallbackProto = require(\"./fallbackProto\");\nconst fallbackRest = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\nconst streaming_1 = require(\"./streamingCalls/streaming\");\nconst util_1 = require(\"./util\");\nconst IamProtos = require(\"../protos/iam_service\");\nexports.IamProtos = IamProtos;\nconst LocationProtos = require(\"../protos/locations\");\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = require(\"../protos/operations\");\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = require(\"./pathTemplate\");\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function () {\n    return pathTemplate_1.PathTemplate;\n  }\n});\nvar gax_1 = require(\"./gax\");\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.RetryOptions;\n  }\n});\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.createDefaultBackoffSettings;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\nvar descriptor_1 = require(\"./descriptor\");\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.StreamDescriptor;\n  }\n});\nvar streaming_2 = require(\"./streamingCalls/streaming\");\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function () {\n    return streaming_2.StreamType;\n  }\n});\nvar operationsClient_2 = require(\"./operationsClient\");\nObject.defineProperty(exports, \"OperationsClient\", {\n  enumerable: true,\n  get: function () {\n    return operationsClient_2.OperationsClient;\n  }\n});\nvar iamService_1 = require(\"./iamService\");\nObject.defineProperty(exports, \"IamClient\", {\n  enumerable: true,\n  get: function () {\n    return iamService_1.IamClient;\n  }\n});\nvar locationService_1 = require(\"./locationService\");\nObject.defineProperty(exports, \"LocationsClient\", {\n  enumerable: true,\n  get: function () {\n    return locationService_1.LocationsClient;\n  }\n});\nexports.defaultToObjectOptions = {\n  keepCase: false,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    if (!(0, featureDetection_1.isNodeJS)()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n      }\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n    this.httpRules = options.httpRules;\n    this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * gRPC-fallback version of loadProto\n   * Loads the protobuf root object from a JSON object created from a proto file\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n   * @returns {Object} Root namespace of proto JSON\n   */\n  loadProto(jsonObject) {\n    const rootObject = protobuf.Root.fromJSON(jsonObject);\n    return rootObject;\n  }\n  loadProtoJSON(json) {\n    let ignoreCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const hash = objectHash(JSON.stringify(json)).toString();\n    const cached = GrpcClient.protoCache.get(hash);\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n    const root = protobuf.Root.fromJSON(json);\n    GrpcClient.protoCache.set(hash, root);\n    return root;\n  }\n  static getServiceMethods(service) {\n    const methods = {};\n    for (const [methodName, methodObject] of Object.entries(service.methods)) {\n      const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n      methods[methodNameLowerCamelCase] = methodObject;\n    }\n    return methods;\n  }\n  /**\n   * gRPC-fallback version of constructSettings\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    function buildMetadata(abTests, moreHeaders) {\n      const metadata = {};\n      if (!headers) {\n        headers = {};\n      }\n      // Since gRPC expects each header to be an array,\n      // we are doing the same for fallback here.\n      for (const key in headers) {\n        metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n      }\n      // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n      const clientVersions = [];\n      if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n        clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n      }\n      clientVersions.push(`grpc-web/${exports.version}`);\n      metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n      if (!moreHeaders) {\n        return metadata;\n      }\n      for (const key in moreHeaders) {\n        if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n          const value = moreHeaders[key];\n          if (Array.isArray(value)) {\n            if (metadata[key] === undefined) {\n              metadata[key] = value;\n            } else {\n              if (Array.isArray(metadata[key])) {\n                metadata[key].push(...value);\n              } else {\n                throw new Error(`Can not add value ${value} to the call metadata.`);\n              }\n            }\n          } else {\n            metadata[key] = [value];\n          }\n        }\n      }\n      return metadata;\n    }\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n      metadataBuilder: buildMetadata\n    });\n  }\n  /**\n   * gRPC-fallback version of createStub\n   * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n   *\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n   * @param {Object} opts - Connection options, as described below.\n   * @param {string} opts.servicePath - The hostname of the API endpoint service.\n   * @param {number} opts.port - The port of the service.\n   * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n   */\n  async createStub(service, opts,\n  // For consistency with createStub in grpc.ts, customServicePath is defined:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  customServicePath) {\n    if (!this.authClient) {\n      if (this.auth && 'getClient' in this.auth) {\n        this.authClient = await this.auth.getClient();\n      } else if (this.auth && 'getRequestHeaders' in this.auth) {\n        this.authClient = this.auth;\n      }\n    }\n    if (!this.authClient) {\n      throw new Error('No authentication was provided');\n    }\n    service.resolveAll();\n    const methods = GrpcClient.getServiceMethods(service);\n    const protocol = opts.protocol || 'https';\n    let servicePath = opts.servicePath;\n    if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n      servicePath = service.options['(google.api.default_host)'];\n    }\n    if (!servicePath) {\n      throw new Error(`Cannot determine service API path for service ${service.name}.`);\n    }\n    let servicePort;\n    const match = servicePath.match(/^(.*):(\\d+)$/);\n    if (match) {\n      servicePath = match[1];\n      servicePort = parseInt(match[2]);\n    }\n    if (opts.port) {\n      servicePort = opts.port;\n    } else if (!servicePort) {\n      servicePort = 443;\n    }\n    const encoder = this.fallback === 'rest' ? fallbackRest.encodeRequest : fallbackProto.encodeRequest;\n    const decoder = this.fallback === 'rest' ? fallbackRest.decodeResponse : fallbackProto.decodeResponse;\n    const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);\n    return serviceStub;\n  }\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message) {\n    return gax.createByteLengthFunction(message);\n  }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  if (options.protoJson) {\n    options = Object.assign(options, {\n      fallback: 'rest'\n    });\n  }\n  const gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, fallback) {\n  if ((!fallback || fallback === 'rest') && descriptor && 'streaming' in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n    return () => {\n      throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\n    };\n  }\n  if ((fallback === 'proto' || fallback === true) &&\n  // for legacy reasons, fallback === true means 'proto'\n  descriptor && 'streaming' in descriptor) {\n    return () => {\n      throw new Error('The gRPC-fallback (proto over HTTP) transport currently does not support streaming calls.');\n    };\n  }\n  return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\");\nvar warnings_1 = require(\"./warnings\");\nObject.defineProperty(exports, \"warn\", {\n  enumerable: true,\n  get: function () {\n    return warnings_1.warn;\n  }\n});\nvar longrunning_1 = require(\"./longRunningCalls/longrunning\");\nObject.defineProperty(exports, \"Operation\", {\n  enumerable: true,\n  get: function () {\n    return longrunning_1.Operation;\n  }\n});\nObject.defineProperty(exports, \"operation\", {\n  enumerable: true,\n  get: function () {\n    return longrunning_1.operation;\n  }\n});\nvar googleError_1 = require(\"./googleError\");\nObject.defineProperty(exports, \"GoogleError\", {\n  enumerable: true,\n  get: function () {\n    return googleError_1.GoogleError;\n  }\n});\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"mappings":"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","names":["exports","Object","enumerable","get","require","version","keepCase","longs","String","enums","defaults","oneofs","CLIENT_VERSION_HEADER","GrpcClient","constructor","options","auth","Error","JSON","stringify","google_auth_library_1","fallback","grpcVersion","httpRules","numericEnums","clearProtoCache","protoCache","clear","loadProto","jsonObject","rootObject","protobuf","Root","fromJSON","loadProtoJSON","json","ignoreCache","hash","objectHash","toString","cached","root","set","getServiceMethods","service","methods","methodName","methodObject","entries","methodNameLowerCamelCase","constructSettings","serviceName","clientConfig","configOverrides","headers","buildMetadata","abTests","moreHeaders","metadata","key","Array","isArray","clientVersions","push","split","join","toLowerCase","value","undefined","gax","status_1","metadataBuilder","createStub","opts","customServicePath","authClient","getClient","resolveAll","protocol","servicePath","name","servicePort","match","parseInt","port","encoder","fallbackRest","encodeRequest","fallbackProto","decoder","decodeResponse","serviceStub","createByteLengthFunction","message","Map","lro","assign","scopes","protoJson","gaxGrpc","operationsClient_1","createApiCall","func","settings","descriptor","type","streaming_1","SERVER_STREAMING","module"],"sources":["../../src/fallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}