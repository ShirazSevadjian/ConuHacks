{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overrideHttpRules = exports.transcode = exports.isProto3OptionalField = exports.flattenObject = exports.match = exports.applyPattern = exports.encodeWithoutSlashes = exports.encodeWithSlashes = exports.buildQueryStringComponents = exports.deleteField = exports.deepCopyWithoutMatchedFields = exports.getField = void 0;\nconst util_1 = require(\"./util\");\nconst httpOptionName = '(google.api.http)';\nconst proto3OptionalName = 'proto3_optional';\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\nfunction getField(request, field) {\n  let allowObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const parts = field.split('.');\n  let value = request;\n  for (const part of parts) {\n    if (typeof value !== 'object') {\n      return undefined;\n    }\n    value = value[part];\n  }\n  if (!allowObjects && typeof value === 'object' && !Array.isArray(value) && value !== null) {\n    return undefined;\n  }\n  return value;\n}\nexports.getField = getField;\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip) {\n  let fullNamePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (typeof request !== 'object' || request === null) {\n    return request;\n  }\n  const copy = Object.assign({}, request);\n  for (const key in copy) {\n    if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n      delete copy[key];\n      continue;\n    }\n    const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n    if (Array.isArray(copy[key])) {\n      // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n      copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\n    } else if (typeof copy[key] === 'object' && copy[key] !== null) {\n      copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n    }\n  }\n  return copy;\n}\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nfunction deleteField(request, field) {\n  const parts = field.split('.');\n  while (parts.length > 1) {\n    if (typeof request !== 'object') {\n      return;\n    }\n    const part = parts.shift();\n    request = request[part];\n  }\n  const part = parts.shift();\n  if (typeof request !== 'object') {\n    return;\n  }\n  delete request[part];\n}\nexports.deleteField = deleteField;\nfunction buildQueryStringComponents(request) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const resultList = [];\n  for (const key in request) {\n    if (Array.isArray(request[key])) {\n      for (const value of request[key]) {\n        resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n      }\n    } else if (typeof request[key] === 'object' && request[key] !== null) {\n      resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n    } else {\n      resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\n    }\n  }\n  return resultList;\n}\nexports.buildQueryStringComponents = buildQueryStringComponents;\nfunction encodeWithSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join('');\n}\nexports.encodeWithSlashes = encodeWithSlashes;\nfunction encodeWithoutSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join('');\n}\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction applyPattern(pattern, fieldValue) {\n  if (!pattern || pattern === '*') {\n    return encodeWithSlashes(fieldValue);\n  }\n  if (!pattern.includes('*') && pattern !== fieldValue) {\n    return undefined;\n  }\n  // since we're converting the pattern to a regex, make necessary precautions:\n  const regex = new RegExp('^' + escapeRegExp(pattern).replace(/\\\\\\*\\\\\\*/g, '(.+)').replace(/\\\\\\*/g, '([^/]+)') + '$');\n  if (!fieldValue.match(regex)) {\n    return undefined;\n  }\n  return encodeWithoutSlashes(fieldValue);\n}\nexports.applyPattern = applyPattern;\nfunction fieldToCamelCase(field) {\n  const parts = field.split('.');\n  return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\n}\nfunction match(request, pattern) {\n  let url = pattern;\n  const matchedFields = [];\n  for (;;) {\n    const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n    if (!match) {\n      break;\n    }\n    const [, before, field, pattern, after] = match;\n    const camelCasedField = fieldToCamelCase(field);\n    matchedFields.push(fieldToCamelCase(camelCasedField));\n    const fieldValue = getField(request, camelCasedField);\n    if (fieldValue === undefined) {\n      return undefined;\n    }\n    const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n    if (appliedPattern === undefined) {\n      return undefined;\n    }\n    url = before + appliedPattern + after;\n  }\n  return {\n    matchedFields,\n    url\n  };\n}\nexports.match = match;\nfunction flattenObject(request) {\n  const result = {};\n  for (const key in request) {\n    if (request[key] === undefined) {\n      continue;\n    }\n    if (Array.isArray(request[key])) {\n      // According to the http.proto comments, a repeated field may only\n      // contain primitive types, so no extra recursion here.\n      result[key] = request[key];\n      continue;\n    }\n    if (typeof request[key] === 'object' && request[key] !== null) {\n      const nested = flattenObject(request[key]);\n      for (const nestedKey in nested) {\n        result[`${key}.${nestedKey}`] = nested[nestedKey];\n      }\n      continue;\n    }\n    result[key] = request[key];\n  }\n  return result;\n}\nexports.flattenObject = flattenObject;\nfunction isProto3OptionalField(field) {\n  return field && field.options && field.options[proto3OptionalName];\n}\nexports.isProto3OptionalField = isProto3OptionalField;\nfunction transcode(request, parsedOptions) {\n  const httpRules = [];\n  for (const option of parsedOptions) {\n    if (!(httpOptionName in option)) {\n      continue;\n    }\n    const httpRule = option[httpOptionName];\n    httpRules.push(httpRule);\n    if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {\n      const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];\n      httpRules.push(...additionalBindings);\n    }\n  }\n  for (const httpRule of httpRules) {\n    for (const httpMethod of supportedHttpMethods) {\n      if (!(httpMethod in httpRule)) {\n        continue;\n      }\n      const pathTemplate = httpRule[httpMethod];\n      const matchResult = match(request, pathTemplate);\n      if (matchResult === undefined) {\n        continue;\n      }\n      const {\n        url,\n        matchedFields\n      } = matchResult;\n      let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n      if (httpRule.body === '*') {\n        return {\n          httpMethod,\n          url,\n          queryString: '',\n          data\n        };\n      }\n      // one field possibly goes to request data, others go to query string\n      const queryStringObject = data;\n      if (httpRule.body) {\n        data = getField(queryStringObject, fieldToCamelCase(httpRule.body), /*allowObjects:*/true);\n        deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n      } else {\n        data = '';\n      }\n      const queryStringComponents = buildQueryStringComponents(queryStringObject);\n      const queryString = queryStringComponents.join('&');\n      if (!data || typeof data === 'object' && Object.keys(data).length === 0) {\n        data = '';\n      }\n      return {\n        httpMethod,\n        url,\n        queryString,\n        data\n      };\n    }\n  }\n  return undefined;\n}\nexports.transcode = transcode;\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n  for (const rule of httpRules) {\n    if (!rule.selector) {\n      continue;\n    }\n    const rpc = protoJson.lookup(rule.selector);\n    // Not support override on non-exist RPC or a RPC without an annotation.\n    // We could reconsider if we have the use case later.\n    if (!rpc || !rpc.parsedOptions) {\n      continue;\n    }\n    for (const item of rpc.parsedOptions) {\n      if (!(httpOptionName in item)) {\n        continue;\n      }\n      const httpOptions = item[httpOptionName];\n      for (const httpMethod in httpOptions) {\n        if (httpMethod in rule) {\n          if (httpMethod === 'additional_bindings') {\n            continue;\n          }\n          httpOptions[httpMethod] = rule[httpMethod];\n        }\n        if (rule.additional_bindings) {\n          httpOptions['additional_bindings'] = !httpOptions['additional_bindings'] ? [] : Array.isArray(httpOptions['additional_bindings']) ? httpOptions['additional_bindings'] : [httpOptions['additional_bindings']];\n          // Make the additional_binding to be an array if it is not.\n          httpOptions['additional_bindings'].push(...rule.additional_bindings);\n        }\n      }\n    }\n  }\n}\nexports.overrideHttpRules = overrideHttpRules;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAsBA;AASA,MAAMA,cAAc,GAAG,mBAAmB;AAC1C,MAAMC,kBAAkB,GAAG,iBAAiB;AAK5C;AACA,MAAMC,oBAAoB,GACxB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;AAU3C,SAAgBC,QAAQ,CACtBC,OAAmB,EACnBC,KAAa;MACbC,YAAY,uEAAG,KAAK;EAEpB,MAAMC,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAIC,KAAK,GAAcL,OAAO;EAC9B,KAAK,MAAMM,IAAI,IAAIH,KAAK,EAAE;IACxB,IAAI,OAAOE,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOE,SAAS;;IAElBF,KAAK,GAAIA,KAAoB,CAACC,IAAI,CAAc;;EAElD,IACE,CAACJ,YAAY,IACb,OAAOG,KAAK,KAAK,QAAQ,IACzB,CAACG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IACrBA,KAAK,KAAK,IAAI,EACd;IACA,OAAOE,SAAS;;EAElB,OAAOF,KAAK;AACd;AAtBAK;AAwBA,SAAgBC,4BAA4B,CAC1CX,OAAmB,EACnBY,YAAyB,EACN;EAAA,IAAnBC,cAAc,uEAAG,EAAE;EAEnB,IAAI,OAAOb,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;IACnD,OAAOA,OAAO;;EAEhB,MAAMc,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEhB,OAAO,CAAC;EACvC,KAAK,MAAMiB,GAAG,IAAIH,IAAI,EAAE;IACtB,IAAIF,YAAY,CAACM,GAAG,CAAC,GAAGL,cAAc,GAAGI,GAAG,EAAE,CAAC,EAAE;MAC/C,OAAOH,IAAI,CAACG,GAAG,CAAC;MAChB;;IAEF,MAAME,kBAAkB,GAAG,GAAGN,cAAc,GAAGI,GAAG,GAAG;IACrD,IAAIT,KAAK,CAACC,OAAO,CAACK,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE;MAC5B;MACAH,IAAI,CAACG,GAAG,CAAC,GAAIH,IAAI,CAACG,GAAG,CAAkB,CAACG,GAAG,CAACf,KAAK,IAC/CM,4BAA4B,CAACN,KAAK,EAAE,IAAIgB,GAAG,EAAE,CAAC,CAC/C;KACF,MAAM,IAAI,OAAOP,IAAI,CAACG,GAAG,CAAC,KAAK,QAAQ,IAAIH,IAAI,CAACG,GAAG,CAAC,KAAK,IAAI,EAAE;MAC9DH,IAAI,CAACG,GAAG,CAAC,GAAGN,4BAA4B,CACtCG,IAAI,CAACG,GAAG,CAAe,EACvBL,YAAY,EACZO,kBAAkB,CACnB;;;EAGL,OAAOL,IAAI;AACb;AA7BAJ;AA+BA,SAAgBY,WAAW,CAACtB,OAAmB,EAAEC,KAAa;EAC5D,MAAME,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,OAAOD,KAAK,CAACoB,MAAM,GAAG,CAAC,EAAE;IACvB,IAAI,OAAOvB,OAAO,KAAK,QAAQ,EAAE;MAC/B;;IAEF,MAAMM,IAAI,GAAGH,KAAK,CAACqB,KAAK,EAAY;IACpCxB,OAAO,GAAGA,OAAO,CAACM,IAAI,CAAe;;EAEvC,MAAMA,IAAI,GAAGH,KAAK,CAACqB,KAAK,EAAY;EACpC,IAAI,OAAOxB,OAAO,KAAK,QAAQ,EAAE;IAC/B;;EAEF,OAAOA,OAAO,CAACM,IAAI,CAAC;AACtB;AAdAI;AAgBA,SAAgBe,0BAA0B,CACxCzB,OAAmB,EACR;EAAA,IAAX0B,MAAM,uEAAG,EAAE;EAEX,MAAMC,UAAU,GAAG,EAAE;EACrB,KAAK,MAAMV,GAAG,IAAIjB,OAAO,EAAE;IACzB,IAAIQ,KAAK,CAACC,OAAO,CAACT,OAAO,CAACiB,GAAG,CAAC,CAAC,EAAE;MAC/B,KAAK,MAAMZ,KAAK,IAAIL,OAAO,CAACiB,GAAG,CAAiB,EAAE;QAChDU,UAAU,CAACC,IAAI,CACb,GAAGF,MAAM,GAAGG,oBAAoB,CAACZ,GAAG,CAAC,IAAIY,oBAAoB,CAC3DxB,KAAK,CAACyB,QAAQ,EAAE,CACjB,EAAE,CACJ;;KAEJ,MAAM,IAAI,OAAO9B,OAAO,CAACiB,GAAG,CAAC,KAAK,QAAQ,IAAIjB,OAAO,CAACiB,GAAG,CAAC,KAAK,IAAI,EAAE;MACpEU,UAAU,CAACC,IAAI,CACb,GAAGH,0BAA0B,CAACzB,OAAO,CAACiB,GAAG,CAAe,EAAE,GAAGA,GAAG,GAAG,CAAC,CACrE;KACF,MAAM;MACLU,UAAU,CAACC,IAAI,CACb,GAAGF,MAAM,GAAGG,oBAAoB,CAACZ,GAAG,CAAC,IAAIY,oBAAoB,CAC3D7B,OAAO,CAACiB,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,GAAGjB,OAAO,CAACiB,GAAG,CAAE,CAACa,QAAQ,EAAE,CAC1D,EAAE,CACJ;;;EAGL,OAAOH,UAAU;AACnB;AA3BAjB;AA6BA,SAAgBqB,iBAAiB,CAACC,GAAW;EAC3C,OAAOA,GAAG,CACP5B,KAAK,CAAC,EAAE,CAAC,CACTgB,GAAG,CAACa,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,iBAAiB,CAAC,GAAGD,CAAC,GAAGE,kBAAkB,CAACF,CAAC,CAAE,CAAC,CAClEG,IAAI,CAAC,EAAE,CAAC;AACb;AALA1B;AAOA,SAAgBmB,oBAAoB,CAACG,GAAW;EAC9C,OAAOA,GAAG,CACP5B,KAAK,CAAC,EAAE,CAAC,CACTgB,GAAG,CAACa,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,kBAAkB,CAAC,GAAGD,CAAC,GAAGE,kBAAkB,CAACF,CAAC,CAAE,CAAC,CACnEG,IAAI,CAAC,EAAE,CAAC;AACb;AALA1B;AAOA,SAAS2B,YAAY,CAACL,GAAW;EAC/B,OAAOA,GAAG,CAACM,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;AACnD;AAEA,SAAgBC,YAAY,CAC1BC,OAAe,EACfC,UAAkB;EAElB,IAAI,CAACD,OAAO,IAAIA,OAAO,KAAK,GAAG,EAAE;IAC/B,OAAOT,iBAAiB,CAACU,UAAU,CAAC;;EAGtC,IAAI,CAACD,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,OAAO,KAAKC,UAAU,EAAE;IACpD,OAAOlC,SAAS;;EAGlB;EACA,MAAMoC,KAAK,GAAG,IAAIC,MAAM,CACtB,GAAG,GACDP,YAAY,CAACG,OAAO,CAAC,CAClBF,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5BA,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,GAC9B,GAAG,CACN;EAED,IAAI,CAACG,UAAU,CAACP,KAAK,CAACS,KAAK,CAAC,EAAE;IAC5B,OAAOpC,SAAS;;EAGlB,OAAOsB,oBAAoB,CAACY,UAAU,CAAC;AACzC;AA1BA/B;AA4BA,SAASmC,gBAAgB,CAAC5C,KAAa;EACrC,MAAME,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,OAAOD,KAAK,CAACiB,GAAG,CAACd,IAAI,IAAI,sBAAgB,EAACA,IAAI,CAAC,CAAC,CAAC8B,IAAI,CAAC,GAAG,CAAC;AAC5D;AAOA,SAAgBF,KAAK,CACnBlC,OAAmB,EACnBwC,OAAe;EAEf,IAAIM,GAAG,GAAGN,OAAO;EACjB,MAAMO,aAAa,GAAG,EAAE;EACxB,SAAS;IACP,MAAMb,KAAK,GAAGY,GAAG,CAACZ,KAAK,CAAC,oCAAoC,CAAC;IAC7D,IAAI,CAACA,KAAK,EAAE;MACV;;IAEF,MAAM,GAAGc,MAAM,EAAE/C,KAAK,EAAEuC,OAAO,EAAES,KAAK,CAAC,GAAGf,KAAK;IAC/C,MAAMgB,eAAe,GAAGL,gBAAgB,CAAC5C,KAAK,CAAC;IAC/C8C,aAAa,CAACnB,IAAI,CAACiB,gBAAgB,CAACK,eAAe,CAAC,CAAC;IACrD,MAAMT,UAAU,GAAG1C,QAAQ,CAACC,OAAO,EAAEkD,eAAe,CAAC;IACrD,IAAIT,UAAU,KAAKlC,SAAS,EAAE;MAC5B,OAAOA,SAAS;;IAElB,MAAM4C,cAAc,GAAGZ,YAAY,CACjCC,OAAO,EACPC,UAAU,KAAK,IAAI,GAAG,MAAM,GAAGA,UAAW,CAACX,QAAQ,EAAE,CACtD;IACD,IAAIqB,cAAc,KAAK5C,SAAS,EAAE;MAChC,OAAOA,SAAS;;IAElBuC,GAAG,GAAGE,MAAM,GAAGG,cAAc,GAAGF,KAAK;;EAGvC,OAAO;IAACF,aAAa;IAAED;EAAG,CAAC;AAC7B;AA7BApC;AA+BA,SAAgB0C,aAAa,CAACpD,OAAmB;EAC/C,MAAMqD,MAAM,GAAe,EAAE;EAC7B,KAAK,MAAMpC,GAAG,IAAIjB,OAAO,EAAE;IACzB,IAAIA,OAAO,CAACiB,GAAG,CAAC,KAAKV,SAAS,EAAE;MAC9B;;IAGF,IAAIC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACiB,GAAG,CAAC,CAAC,EAAE;MAC/B;MACA;MACAoC,MAAM,CAACpC,GAAG,CAAC,GAAGjB,OAAO,CAACiB,GAAG,CAAC;MAC1B;;IAGF,IAAI,OAAOjB,OAAO,CAACiB,GAAG,CAAC,KAAK,QAAQ,IAAIjB,OAAO,CAACiB,GAAG,CAAC,KAAK,IAAI,EAAE;MAC7D,MAAMqC,MAAM,GAAGF,aAAa,CAACpD,OAAO,CAACiB,GAAG,CAAe,CAAC;MACxD,KAAK,MAAMsC,SAAS,IAAID,MAAM,EAAE;QAC9BD,MAAM,CAAC,GAAGpC,GAAG,IAAIsC,SAAS,EAAE,CAAC,GAAGD,MAAM,CAACC,SAAS,CAAC;;MAEnD;;IAGFF,MAAM,CAACpC,GAAG,CAAC,GAAGjB,OAAO,CAACiB,GAAG,CAAC;;EAG5B,OAAOoC,MAAM;AACf;AA1BA3C;AA4BA,SAAgB8C,qBAAqB,CAACvD,KAAY;EAChD,OAAOA,KAAK,IAAIA,KAAK,CAACwD,OAAO,IAAIxD,KAAK,CAACwD,OAAQ,CAAC5D,kBAAkB,CAAC;AACrE;AAFAa;AAIA,SAAgBgD,SAAS,CACvB1D,OAAmB,EACnB2D,aAAgC;EAEhC,MAAMC,SAAS,GAAG,EAAE;EACpB,KAAK,MAAMC,MAAM,IAAIF,aAAa,EAAE;IAClC,IAAI,EAAE/D,cAAc,IAAIiE,MAAM,CAAC,EAAE;MAC/B;;IAGF,MAAMC,QAAQ,GAAGD,MAAM,CAACjE,cAAc,CAAyB;IAC/DgE,SAAS,CAAChC,IAAI,CAACkC,QAAQ,CAAC;IAExB,IAAIA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,mBAAmB,EAAE;MACjC,MAAMC,kBAAkB,GAAGxD,KAAK,CAACC,OAAO,CAACqD,QAAQ,CAACC,mBAAmB,CAAC,GAClED,QAAQ,CAACC,mBAAmB,GAC5B,CAACD,QAAQ,CAACC,mBAAmB,CAAC;MAClCH,SAAS,CAAChC,IAAI,CAAC,GAAGoC,kBAAkB,CAAC;;;EAIzC,KAAK,MAAMF,QAAQ,IAAIF,SAAS,EAAE;IAChC,KAAK,MAAMK,UAAU,IAAInE,oBAAoB,EAAE;MAC7C,IAAI,EAAEmE,UAAU,IAAIH,QAAQ,CAAC,EAAE;QAC7B;;MAEF,MAAMI,YAAY,GAAGJ,QAAQ,CAC3BG,UAAwC,CAC/B;MACX,MAAME,WAAW,GAAGjC,KAAK,CAAClC,OAAO,EAAEkE,YAAY,CAAC;MAChD,IAAIC,WAAW,KAAK5D,SAAS,EAAE;QAC7B;;MAEF,MAAM;QAACuC,GAAG;QAAEC;MAAa,CAAC,GAAGoB,WAAW;MAExC,IAAIC,IAAI,GACNzD,4BAA4B,CAACX,OAAO,EAAE,IAAIqB,GAAG,CAAC0B,aAAa,CAAC,CAAC;MAC/D,IAAIe,QAAQ,CAACO,IAAI,KAAK,GAAG,EAAE;QACzB,OAAO;UAACJ,UAAU;UAAEnB,GAAG;UAAEwB,WAAW,EAAE,EAAE;UAAEF;QAAI,CAAC;;MAGjD;MACA,MAAMG,iBAAiB,GAAGH,IAAI;MAC9B,IAAIN,QAAQ,CAACO,IAAI,EAAE;QACjBD,IAAI,GAAGrE,QAAQ,CACbwE,iBAAiB,EACjB1B,gBAAgB,CAACiB,QAAQ,CAACO,IAAI,CAAC,EAC/B,iBAAkB,IAAI,CACvB;QACD/C,WAAW,CAACiD,iBAAiB,EAAE1B,gBAAgB,CAACiB,QAAQ,CAACO,IAAI,CAAC,CAAC;OAChE,MAAM;QACLD,IAAI,GAAG,EAAE;;MAEX,MAAMI,qBAAqB,GACzB/C,0BAA0B,CAAC8C,iBAAiB,CAAC;MAC/C,MAAMD,WAAW,GAAGE,qBAAqB,CAACpC,IAAI,CAAC,GAAG,CAAC;MACnD,IACE,CAACgC,IAAI,IACJ,OAAOA,IAAI,KAAK,QAAQ,IAAIrD,MAAM,CAAC0D,IAAI,CAACL,IAAI,CAAC,CAAC7C,MAAM,KAAK,CAAE,EAC5D;QACA6C,IAAI,GAAG,EAAE;;MAEX,OAAO;QAACH,UAAU;QAAEnB,GAAG;QAAEwB,WAAW;QAAEF;MAAI,CAAC;;;EAG/C,OAAO7D,SAAS;AAClB;AAlEAG;AAoEA;AACA,SAAgBgE,iBAAiB,CAC/Bd,SAAsC,EACtCe,SAAwB;EAExB,KAAK,MAAMC,IAAI,IAAIhB,SAAS,EAAE;IAC5B,IAAI,CAACgB,IAAI,CAACC,QAAQ,EAAE;MAClB;;IAEF,MAAMC,GAAG,GAAGH,SAAS,CAACI,MAAM,CAACH,IAAI,CAACC,QAAQ,CAAoB;IAC9D;IACA;IACA,IAAI,CAACC,GAAG,IAAI,CAACA,GAAG,CAACnB,aAAa,EAAE;MAC9B;;IAEF,KAAK,MAAMqB,IAAI,IAAIF,GAAG,CAACnB,aAAa,EAAE;MACpC,IAAI,EAAE/D,cAAc,IAAIoF,IAAI,CAAC,EAAE;QAC7B;;MAEF,MAAMC,WAAW,GAAGD,IAAI,CAACpF,cAAc,CAAC;MACxC,KAAK,MAAMqE,UAAU,IAAIgB,WAAW,EAAE;QACpC,IAAIhB,UAAU,IAAIW,IAAI,EAAE;UACtB,IAAIX,UAAU,KAAK,qBAAqB,EAAE;YACxC;;UAEFgB,WAAW,CAAChB,UAAU,CAAC,GACrBW,IAAI,CAACX,UAAwC,CAAC;;QAElD,IAAIW,IAAI,CAACb,mBAAmB,EAAE;UAC5BkB,WAAW,CAAC,qBAAqB,CAAC,GAAG,CAACA,WAAW,CAC/C,qBAAqB,CACtB,GACG,EAAE,GACFzE,KAAK,CAACC,OAAO,CAACwE,WAAW,CAAC,qBAAqB,CAAC,CAAC,GACjDA,WAAW,CAAC,qBAAqB,CAAC,GAClC,CAACA,WAAW,CAAC,qBAAqB,CAAC,CAAC;UACxC;UACAA,WAAW,CAAC,qBAAqB,CAAC,CAACrD,IAAI,CAAC,GAAGgD,IAAI,CAACb,mBAAmB,CAAC;;;;;AAK9E;AAzCArD","names":["httpOptionName","proto3OptionalName","supportedHttpMethods","getField","request","field","allowObjects","parts","split","value","part","undefined","Array","isArray","exports","deepCopyWithoutMatchedFields","fieldsToSkip","fullNamePrefix","copy","Object","assign","key","has","nextFullNamePrefix","map","Set","deleteField","length","shift","buildQueryStringComponents","prefix","resultList","push","encodeWithoutSlashes","toString","encodeWithSlashes","str","c","match","encodeURIComponent","join","escapeRegExp","replace","applyPattern","pattern","fieldValue","includes","regex","RegExp","fieldToCamelCase","url","matchedFields","before","after","camelCasedField","appliedPattern","flattenObject","result","nested","nestedKey","isProto3OptionalField","options","transcode","parsedOptions","httpRules","option","httpRule","additional_bindings","additionalBindings","httpMethod","pathTemplate","matchResult","data","body","queryString","queryStringObject","queryStringComponents","keys","overrideHttpRules","protoJson","rule","selector","rpc","lookup","item","httpOptions"],"sources":["../../src/transcoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}