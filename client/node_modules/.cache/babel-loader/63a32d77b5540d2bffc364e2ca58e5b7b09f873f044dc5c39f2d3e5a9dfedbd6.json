{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\nexports.GCE_LINUX_BIOS_PATHS = {\n  BIOS_DATE: '/sys/class/dmi/id/bios_date',\n  BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor'\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\nfunction isGoogleCloudServerless() {\n  /**\n   * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   *\n   * `FUNCTION_NAME` is used in older Cloud Functions environments:\n   * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n   *\n   * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n   */\n  const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;\n  return !!isGFEnvironment;\n}\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngineLinux() {\n  if ((0, os_1.platform)() !== 'linux') return false;\n  try {\n    // ensure this file exist\n    (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n    // ensure this file exist and matches\n    const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n    return /Google/.test(biosVendor);\n  } catch (_a) {\n    return false;\n  }\n}\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\nfunction isGoogleComputeEngineMACAddress() {\n  const interfaces = (0, os_1.networkInterfaces)();\n  for (const item of Object.values(interfaces)) {\n    if (!item) continue;\n    for (const {\n      mac\n    } of item) {\n      if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngine() {\n  return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\nfunction detectGCPResidency() {\n  return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\nexports.detectGCPResidency = detectGCPResidency;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AAEA;;;AAGaA,4BAAoB,GAAG;EAClCC,SAAS,EAAE,6BAA6B;EACxCC,WAAW,EAAE;CACd;AAED,MAAMC,qBAAqB,GAAG,QAAQ;AAEtC;;;;;;;;;AASA,SAAgBC,uBAAuB;EACrC;;;;;;;;;;;EAWA,MAAMC,eAAe,GACnBC,OAAO,CAACC,GAAG,CAACC,aAAa,IACzBF,OAAO,CAACC,GAAG,CAACE,aAAa,IACzBH,OAAO,CAACC,GAAG,CAACG,SAAS;EAEvB,OAAO,CAAC,CAACL,eAAe;AAC1B;AAlBAL;AAoBA;;;;;AAKA,SAAgBW,0BAA0B;EACxC,IAAI,iBAAQ,GAAE,KAAK,OAAO,EAAE,OAAO,KAAK;EAExC,IAAI;IACF;IACA,iBAAQ,EAACX,4BAAoB,CAACC,SAAS,CAAC;IAExC;IACA,MAAMW,UAAU,GAAG,qBAAY,EAACZ,4BAAoB,CAACE,WAAW,EAAE,MAAM,CAAC;IAEzE,OAAO,QAAQ,CAACW,IAAI,CAACD,UAAU,CAAC;GACjC,CAAC,WAAM;IACN,OAAO,KAAK;;AAEhB;AAdAZ;AAgBA;;;;;;AAMA,SAAgBc,+BAA+B;EAC7C,MAAMC,UAAU,GAAG,0BAAiB,GAAE;EAEtC,KAAK,MAAMC,IAAI,IAAIC,MAAM,CAACC,MAAM,CAACH,UAAU,CAAC,EAAE;IAC5C,IAAI,CAACC,IAAI,EAAE;IAEX,KAAK,MAAM;MAACG;IAAG,CAAC,IAAIH,IAAI,EAAE;MACxB,IAAIb,qBAAqB,CAACU,IAAI,CAACM,GAAG,CAAC,EAAE;QACnC,OAAO,IAAI;;;;EAKjB,OAAO,KAAK;AACd;AAdAnB;AAgBA;;;;;AAKA,SAAgBoB,qBAAqB;EACnC,OAAOT,0BAA0B,EAAE,IAAIG,+BAA+B,EAAE;AAC1E;AAFAd;AAIA;;;;;AAKA,SAAgBqB,kBAAkB;EAChC,OAAOjB,uBAAuB,EAAE,IAAIgB,qBAAqB,EAAE;AAC7D;AAFApB","names":["exports","BIOS_DATE","BIOS_VENDOR","GCE_MAC_ADDRESS_REGEX","isGoogleCloudServerless","isGFEnvironment","process","env","CLOUD_RUN_JOB","FUNCTION_NAME","K_SERVICE","isGoogleComputeEngineLinux","biosVendor","test","isGoogleComputeEngineMACAddress","interfaces","item","Object","values","mac","isGoogleComputeEngine","detectGCPResidency"],"sources":["../../src/gcp-residency.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}