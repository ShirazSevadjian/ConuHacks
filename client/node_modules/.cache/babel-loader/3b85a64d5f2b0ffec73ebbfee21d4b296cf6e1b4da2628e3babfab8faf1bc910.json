{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingApiCaller = void 0;\nconst warnings_1 = require(\"../warnings\");\nconst streaming_1 = require(\"./streaming\");\nclass StreamingApiCaller {\n  /**\n   * An API caller for methods of gRPC streaming.\n   * @private\n   * @constructor\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n   */\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n  init(callback) {\n    return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest);\n  }\n  wrap(func) {\n    switch (this.descriptor.type) {\n      case streaming_1.StreamType.SERVER_STREAMING:\n        return (argument, metadata, options) => {\n          return func(argument, metadata, options);\n        };\n      case streaming_1.StreamType.CLIENT_STREAMING:\n        return (argument, metadata, options, callback) => {\n          return func(metadata, options, callback);\n        };\n      case streaming_1.StreamType.BIDI_STREAMING:\n        return (argument, metadata, options) => {\n          return func(metadata, options);\n        };\n      default:\n        (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n    }\n    return func;\n  }\n  call(apiCall, argument, settings, stream) {\n    stream.setStream(apiCall, argument, settings.retryRequestOptions);\n  }\n  fail(stream, err) {\n    stream.emit('error', err);\n  }\n  result(stream) {\n    return stream;\n  }\n}\nexports.StreamingApiCaller = StreamingApiCaller;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AA0BA;AAGA;AAGA,MAAaA,kBAAkB;EAG7B;;;;;;EAMAC,YAAYC,UAA4B;IACtC,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;EAEAC,IAAI,CAACC,QAAqB;IACxB,OAAO,IAAIC,uBAAW,CACpB,IAAI,CAACH,UAAU,CAACI,IAAI,EACpBF,QAAQ,EACR,IAAI,CAACF,UAAU,CAACK,IAAI,CACrB;EACH;EAEAC,IAAI,CAACC,IAAc;IACjB,QAAQ,IAAI,CAACP,UAAU,CAACI,IAAI;MAC1B,KAAKD,sBAAU,CAACK,gBAAgB;QAC9B,OAAO,CAACC,QAAY,EAAEC,QAAY,EAAEC,OAAW,KAAI;UACjD,OAAQJ,IAA4B,CAACE,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,CAAC;QACnE,CAAC;MACH,KAAKR,sBAAU,CAACS,gBAAgB;QAC9B,OAAO,CACLH,QAAY,EACZC,QAAY,EACZC,OAAW,EACXT,QAAsB,KACpB;UACF,OAAQK,IAA4B,CAACG,QAAQ,EAAEC,OAAO,EAAET,QAAQ,CAAC;QACnE,CAAC;MACH,KAAKC,sBAAU,CAACU,cAAc;QAC5B,OAAO,CAACJ,QAAY,EAAEC,QAAY,EAAEC,OAAW,KAAI;UACjD,OAAQJ,IAA0B,CAACG,QAAQ,EAAEC,OAAO,CAAC;QACvD,CAAC;MACH;QACE,mBAAI,EACF,oCAAoC,EACpC,wBAAwB,IAAI,CAACX,UAAU,CAACI,IAAI,EAAE,CAC/C;IAAC;IAEN,OAAOG,IAAI;EACb;EAEAO,IAAI,CACFC,OAA+B,EAC/BN,QAAY,EACZO,QAAsB,EACtBC,MAAmB;IAEnBA,MAAM,CAACC,SAAS,CAACH,OAAO,EAAEN,QAAQ,EAAEO,QAAQ,CAACG,mBAAmB,CAAC;EACnE;EAEAC,IAAI,CAACH,MAAyB,EAAEI,GAAU;IACxCJ,MAAM,CAACK,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;EAC3B;EAEAE,MAAM,CAACN,MAAyB;IAC9B,OAAOA,MAAM;EACf;;AAhEFO","names":["StreamingApiCaller","constructor","descriptor","init","callback","streaming_1","type","rest","wrap","func","SERVER_STREAMING","argument","metadata","options","CLIENT_STREAMING","BIDI_STREAMING","call","apiCall","settings","stream","setStream","retryRequestOptions","fail","err","emit","result","exports"],"sources":["../../../src/streamingCalls/streamingApiCaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}