{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n *\n * @api public\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n    if (!opts) {\n      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n    }\n    debug('creating new HttpsProxyAgent instance: %o', opts);\n    super(opts);\n    const proxy = Object.assign({}, opts);\n    // If `true`, then connect to the proxy server over TLS.\n    // Defaults to `false`.\n    this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n    // Prefer `hostname` over `host`, and set the `port` if needed.\n    proxy.host = proxy.hostname || proxy.host;\n    if (typeof proxy.port === 'string') {\n      proxy.port = parseInt(proxy.port, 10);\n    }\n    if (!proxy.port && proxy.host) {\n      proxy.port = this.secureProxy ? 443 : 80;\n    }\n    // ALPN is supported by Node.js >= v5.\n    // attempt to negotiate http/1.1 for proxy servers that support http/2\n    if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n      proxy.ALPNProtocols = ['http 1.1'];\n    }\n    if (proxy.host && proxy.path) {\n      // If both a `host` and `path` are specified then it's most likely\n      // the result of a `url.parse()` call... we need to remove the\n      // `path` portion so that `net.connect()` doesn't attempt to open\n      // that as a Unix socket file.\n      delete proxy.path;\n      delete proxy.pathname;\n    }\n    this.proxy = proxy;\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   *\n   * @api protected\n   */\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        proxy,\n        secureProxy\n      } = this;\n      // Create a socket connection to the proxy server.\n      let socket;\n      if (secureProxy) {\n        debug('Creating `tls.Socket`: %o', proxy);\n        socket = tls_1.default.connect(proxy);\n      } else {\n        debug('Creating `net.Socket`: %o', proxy);\n        socket = net_1.default.connect(proxy);\n      }\n      const headers = Object.assign({}, proxy.headers);\n      const hostname = `${opts.host}:${opts.port}`;\n      let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\n      // Inject the `Proxy-Authorization` header if necessary.\n      if (proxy.auth) {\n        headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n      }\n      // The `Host` header should only include the port\n      // number when it is not the default port.\n      let {\n        host,\n        port,\n        secureEndpoint\n      } = opts;\n      if (!isDefaultPort(port, secureEndpoint)) {\n        host += `:${port}`;\n      }\n      headers.Host = host;\n      headers.Connection = 'close';\n      for (const name of Object.keys(headers)) {\n        payload += `${name}: ${headers[name]}\\r\\n`;\n      }\n      const proxyResponsePromise = parse_proxy_response_1.default(socket);\n      socket.write(`${payload}\\r\\n`);\n      const {\n        statusCode,\n        buffered\n      } = yield proxyResponsePromise;\n      if (statusCode === 200) {\n        req.once('socket', resume);\n        if (opts.secureEndpoint) {\n          // The proxy is connecting to a TLS server, so upgrade\n          // this socket connection to a TLS connection.\n          debug('Upgrading socket connection to TLS');\n          const servername = opts.servername || opts.host;\n          return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n            socket,\n            servername\n          }));\n        }\n        return socket;\n      }\n      // Some other status code that's not 200... need to re-play the HTTP\n      // header \"data\" events onto the socket once the HTTP machinery is\n      // attached so that the node core `http` can parse and handle the\n      // error status code.\n      // Close the original socket, and a new \"fake\" socket is returned\n      // instead, so that the proxy doesn't get the HTTP request\n      // written to it (which may contain `Authorization` headers or other\n      // sensitive data).\n      //\n      // See: https://hackerone.com/reports/541502\n      socket.destroy();\n      const fakeSocket = new net_1.default.Socket({\n        writable: false\n      });\n      fakeSocket.readable = true;\n      // Need to wait for the \"socket\" event to re-play the \"data\" events.\n      req.once('socket', s => {\n        debug('replaying proxy buffer for failed request');\n        assert_1.default(s.listenerCount('data') > 0);\n        // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n        // this point the HTTP module machinery has been hooked up for\n        // the user.\n        s.push(buffered);\n        s.push(null);\n      });\n      return fakeSocket;\n    });\n  }\n}\nexports.default = HttpsProxyAgent;\nfunction resume(socket) {\n  socket.resume();\n}\nfunction isDefaultPort(port, secure) {\n  return Boolean(!secure && port === 80 || secure && port === 443);\n}\nfunction isHTTPS(protocol) {\n  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\nfunction omit(obj) {\n  const ret = {};\n  let key;\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}","map":{"version":3,"mappings":"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","names":["debug","debug_1","HttpsProxyAgent","agent_base_1","constructor","_opts","opts","url_1","parse","Error","proxy","secureProxy","isHTTPS","protocol","host","hostname","port","parseInt","ALPNProtocols","path","pathname","callback","req","socket","tls_1","connect","net_1","headers","payload","auth","Buffer","from","toString","secureEndpoint","isDefaultPort","Host","Connection","name","Object","keys","proxyResponsePromise","parse_proxy_response_1","write","statusCode","buffered","once","resume","servername","omit","destroy","fakeSocket","Socket","writable","readable","s","assert_1","listenerCount","push","exports","secure","Boolean","test","obj","ret","key","includes"],"sources":["../src/agent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}