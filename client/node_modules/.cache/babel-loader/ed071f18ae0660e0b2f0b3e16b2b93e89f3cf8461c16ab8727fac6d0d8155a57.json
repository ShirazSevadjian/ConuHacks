{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createByteLengthFunction = exports.constructSettings = exports.createBundleOptions = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createRetryOptions = exports.CallSettings = exports.RetryOptions = void 0;\nconst warnings_1 = require(\"./warnings\");\nconst util_1 = require(\"./util\");\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nclass RetryOptions {\n  constructor(retryCodes, backoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\nexports.RetryOptions = RetryOptions;\nclass CallSettings {\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   *\n   * @constructor\n   */\n  constructor(settings) {\n    var _a;\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate = 'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n    this.longrunning = 'longrunning' in settings ? settings.longrunning : undefined;\n    this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : undefined;\n    this.retryRequestOptions = settings.retryRequestOptions;\n  }\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let apiName = this.apiName;\n    let retryRequestOptions = this.retryRequestOptions;\n    // If a method-specific timeout is set in the service config, and the retry codes for that\n    // method are non-null, then that timeout value will be used to\n    // override backoff settings.\n    if (retry !== undefined && retry !== null && retry.retryCodes !== null && retry.retryCodes.length > 0) {\n      retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n      retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n      retry.backoffSettings.totalTimeoutMillis = timeout;\n    }\n    // If the user provides a timeout to the method, that timeout value will be used\n    // to override the backoff settings.\n    if ('timeout' in options) {\n      timeout = options.timeout;\n      if (retry !== undefined && retry !== null && retry.retryCodes.length > 0) {\n        retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n        retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n        retry.backoffSettings.totalTimeoutMillis = timeout;\n      }\n    }\n    if ('retry' in options) {\n      retry = mergeRetryOptions(retry || {}, options.retry);\n    }\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      for (const optionsKey in options.otherArgs) {\n        otherArgs[optionsKey] = options.otherArgs[optionsKey];\n      }\n    }\n    if ('isBundling' in options) {\n      isBundling = options.isBundling;\n    }\n    if ('maxRetries' in options) {\n      retry.backoffSettings.maxRetries = options.maxRetries;\n      delete retry.backoffSettings.totalTimeoutMillis;\n    }\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n    if ('apiName' in options) {\n      apiName = options.apiName;\n    }\n    if ('retryRequestOptions' in options) {\n      retryRequestOptions = options.retryRequestOptions;\n    }\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      maxResults,\n      otherArgs,\n      isBundling,\n      apiName,\n      retryRequestOptions\n    });\n  }\n}\nexports.CallSettings = CallSettings;\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nfunction createRetryOptions(retryCodes, backoffSettings) {\n  return {\n    retryCodes,\n    backoffSettings\n  };\n}\nexports.createRetryOptions = createRetryOptions;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis\n  };\n}\nexports.createBackoffSettings = createBackoffSettings;\nfunction createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries\n  };\n}\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nfunction createBundleOptions(options) {\n  const params = ['element_count_threshold', 'element_count_limit', 'request_byte_threshold', 'request_byte_limit', 'delay_threshold_millis'];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n  if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold\n  };\n}\nexports.createBundleOptions = createBundleOptions;\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n  if (!methodConfig) {\n    return null;\n  }\n  let codes = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n  let backoffSettings = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[methodConfig.retry_params_name];\n    backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(retry, overrides) {\n  if (!overrides) {\n    return null;\n  }\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n  const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;\n  const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n  otherArgs = otherArgs || {};\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const defaults = {};\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n  // users can override the config from client side, like bundling options.\n  // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\n  // The way to override bundling options:\n  //\n  // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n  // const client = new Client({ projectId, customConfig });\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = (0, util_1.toLowerCamelCase)(methodName);\n    let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n    }\n    const apiName = serviceName;\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n      otherArgs,\n      apiName\n    });\n  }\n  return defaults;\n}\nexports.constructSettings = constructSettings;\nfunction createByteLengthFunction(message) {\n  return function getByteLength(obj) {\n    try {\n      return message.encode(obj).finish().length;\n    } catch (err) {\n      const stringified = JSON.stringify(obj);\n      (0, warnings_1.warn)('error_encoding_protobufjs_object', `Cannot encode protobuf.js object: ${stringified}: ${err}`);\n      // We failed to encode the object properly, let's just return an upper boundary of its length.\n      // It's only needed for calculating the size of the batch, so it's safe if it's bigger than needed.\n      return stringified.length;\n    }\n  };\n}\nexports.createByteLengthFunction = createByteLengthFunction;","map":{"version":3,"mappings":"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","names":["RetryOptions","constructor","retryCodes","backoffSettings","exports","CallSettings","settings","timeout","retry","autoPaginate","maxResults","otherArgs","bundleOptions","isBundling","longrunning","undefined","apiName","retryRequestOptions","merge","options","length","initialRpcTimeoutMillis","maxRpcTimeoutMillis","totalTimeoutMillis","mergeRetryOptions","key","optionsKey","maxRetries","createRetryOptions","createBackoffSettings","initialRetryDelayMillis","retryDelayMultiplier","maxRetryDelayMillis","rpcTimeoutMultiplier","createDefaultBackoffSettings","createMaxRetriesBackoffSettings","createBundleOptions","params","forEach","param","Error","elementCountThreshold","element_count_threshold","elementCountLimit","element_count_limit","requestByteThreshold","request_byte_threshold","requestByteLimit","request_byte_limit","delayThreshold","delay_threshold_millis","constructRetry","methodConfig","retryParams","retryNames","codes","retryCodesName","map","name","Number","retry_params_name","initial_retry_delay_millis","retry_delay_multiplier","max_retry_delay_millis","initial_rpc_timeout_millis","rpc_timeout_multiplier","max_rpc_timeout_millis","total_timeout_millis","overrides","constructSettings","serviceName","clientConfig","configOverrides","defaults","serviceConfig","interfaces","methods","overridingMethods","methodName","jsName","retry_codes","retry_params","bundlingConfig","bundling","timeout_millis","overridingMethod","createByteLengthFunction","message","getByteLength","obj","encode","finish","err","stringified","JSON","stringify"],"sources":["../../src/gax.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}