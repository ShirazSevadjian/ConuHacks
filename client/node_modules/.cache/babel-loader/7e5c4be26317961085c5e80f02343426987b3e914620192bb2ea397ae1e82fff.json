{"ast":null,"code":"\"use strict\";\n\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n  keepCase: false\n};\nvar tokenize = require(\"./tokenize\"),\n  Root = require(\"./root\"),\n  Type = require(\"./type\"),\n  Field = require(\"./field\"),\n  MapField = require(\"./mapfield\"),\n  OneOf = require(\"./oneof\"),\n  Enum = require(\"./enum\"),\n  Service = require(\"./service\"),\n  Method = require(\"./method\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar base10Re = /^[1-9][0-9]*$/,\n  base10NegRe = /^-?[1-9][0-9]*$/,\n  base16Re = /^0[x][0-9a-fA-F]+$/,\n  base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n  base8Re = /^0[0-7]+$/,\n  base8NegRe = /^-?0[0-7]+$/,\n  numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n  nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n  typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n  fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n  /* eslint-disable callback-return */\n  if (!(root instanceof Root)) {\n    options = root;\n    root = new Root();\n  }\n  if (!options) options = parse.defaults;\n  var preferTrailingComment = options.preferTrailingComment || false;\n  var tn = tokenize(source, options.alternateCommentMode || false),\n    next = tn.next,\n    push = tn.push,\n    peek = tn.peek,\n    skip = tn.skip,\n    cmnt = tn.cmnt;\n  var head = true,\n    pkg,\n    imports,\n    weakImports,\n    syntax,\n    isProto3 = false;\n  var ptr = root;\n  var applyCase = options.keepCase ? function (name) {\n    return name;\n  } : util.camelCase;\n\n  /* istanbul ignore next */\n  function illegal(token, name, insideTryCatch) {\n    var filename = parse.filename;\n    if (!insideTryCatch) parse.filename = null;\n    return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n  }\n  function readString() {\n    var values = [],\n      token;\n    do {\n      /* istanbul ignore if */\n      if ((token = next()) !== \"\\\"\" && token !== \"'\") throw illegal(token);\n      values.push(next());\n      skip(token);\n      token = peek();\n    } while (token === \"\\\"\" || token === \"'\");\n    return values.join(\"\");\n  }\n  function readValue(acceptTypeRef) {\n    var token = next();\n    switch (token) {\n      case \"'\":\n      case \"\\\"\":\n        push(token);\n        return readString();\n      case \"true\":\n      case \"TRUE\":\n        return true;\n      case \"false\":\n      case \"FALSE\":\n        return false;\n    }\n    try {\n      return parseNumber(token, /* insideTryCatch */true);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (acceptTypeRef && typeRefRe.test(token)) return token;\n\n      /* istanbul ignore next */\n      throw illegal(token, \"value\");\n    }\n  }\n  function readRanges(target, acceptStrings) {\n    var token, start;\n    do {\n      if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\")) target.push(readString());else target.push([start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start]);\n    } while (skip(\",\", true));\n    skip(\";\");\n  }\n  function parseNumber(token, insideTryCatch) {\n    var sign = 1;\n    if (token.charAt(0) === \"-\") {\n      sign = -1;\n      token = token.substring(1);\n    }\n    switch (token) {\n      case \"inf\":\n      case \"INF\":\n      case \"Inf\":\n        return sign * Infinity;\n      case \"nan\":\n      case \"NAN\":\n      case \"Nan\":\n      case \"NaN\":\n        return NaN;\n      case \"0\":\n        return 0;\n    }\n    if (base10Re.test(token)) return sign * parseInt(token, 10);\n    if (base16Re.test(token)) return sign * parseInt(token, 16);\n    if (base8Re.test(token)) return sign * parseInt(token, 8);\n\n    /* istanbul ignore else */\n    if (numberRe.test(token)) return sign * parseFloat(token);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"number\", insideTryCatch);\n  }\n  function parseId(token, acceptNegative) {\n    switch (token) {\n      case \"max\":\n      case \"MAX\":\n      case \"Max\":\n        return 536870911;\n      case \"0\":\n        return 0;\n    }\n\n    /* istanbul ignore if */\n    if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n    if (base10NegRe.test(token)) return parseInt(token, 10);\n    if (base16NegRe.test(token)) return parseInt(token, 16);\n\n    /* istanbul ignore else */\n    if (base8NegRe.test(token)) return parseInt(token, 8);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"id\");\n  }\n  function parsePackage() {\n    /* istanbul ignore if */\n    if (pkg !== undefined) throw illegal(\"package\");\n    pkg = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n    ptr = ptr.define(pkg);\n    skip(\";\");\n  }\n  function parseImport() {\n    var token = peek();\n    var whichImports;\n    switch (token) {\n      case \"weak\":\n        whichImports = weakImports || (weakImports = []);\n        next();\n        break;\n      case \"public\":\n        next();\n      // eslint-disable-line no-fallthrough\n      default:\n        whichImports = imports || (imports = []);\n        break;\n    }\n    token = readString();\n    skip(\";\");\n    whichImports.push(token);\n  }\n  function parseSyntax() {\n    skip(\"=\");\n    syntax = readString();\n    isProto3 = syntax === \"proto3\";\n\n    /* istanbul ignore if */\n    if (!isProto3 && syntax !== \"proto2\") throw illegal(syntax, \"syntax\");\n    skip(\";\");\n  }\n  function parseCommon(parent, token) {\n    switch (token) {\n      case \"option\":\n        parseOption(parent, token);\n        skip(\";\");\n        return true;\n      case \"message\":\n        parseType(parent, token);\n        return true;\n      case \"enum\":\n        parseEnum(parent, token);\n        return true;\n      case \"service\":\n        parseService(parent, token);\n        return true;\n      case \"extend\":\n        parseExtension(parent, token);\n        return true;\n    }\n    return false;\n  }\n  function ifBlock(obj, fnIf, fnElse) {\n    var trailingLine = tn.line;\n    if (obj) {\n      if (typeof obj.comment !== \"string\") {\n        obj.comment = cmnt(); // try block-type comment\n      }\n\n      obj.filename = parse.filename;\n    }\n    if (skip(\"{\", true)) {\n      var token;\n      while ((token = next()) !== \"}\") fnIf(token);\n      skip(\";\", true);\n    } else {\n      if (fnElse) fnElse();\n      skip(\";\");\n      if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n    }\n  }\n\n  function parseType(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n    var type = new Type(token);\n    ifBlock(type, function parseType_block(token) {\n      if (parseCommon(type, token)) return;\n      switch (token) {\n        case \"map\":\n          parseMapField(type, token);\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"oneof\":\n          parseOneOf(type, token);\n          break;\n        case \"extensions\":\n          readRanges(type.extensions || (type.extensions = []));\n          break;\n        case \"reserved\":\n          readRanges(type.reserved || (type.reserved = []), true);\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(type, \"optional\");\n          break;\n      }\n    });\n    parent.add(type);\n  }\n  function parseField(parent, rule, extend) {\n    var type = next();\n    if (type === \"group\") {\n      parseGroup(parent, rule);\n      return;\n    }\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    name = applyCase(name);\n    skip(\"=\");\n    var field = new Field(name, parseId(next()), type, rule, extend);\n    ifBlock(field, function parseField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseField_line() {\n      parseInlineOptions(field);\n    });\n    if (rule === \"proto3_optional\") {\n      // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n      var oneof = new OneOf(\"_\" + name);\n      field.setOption(\"proto3_optional\", true);\n      oneof.add(field);\n      parent.add(oneof);\n    } else {\n      parent.add(field);\n    }\n\n    // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n    // parsing proto2 descriptors without the option, where applicable. This must be done for\n    // all known packable types and anything that could be an enum (= is not a basic type).\n    if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption(\"packed\", false, /* ifNotSet */true);\n  }\n  function parseGroup(parent, rule) {\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    var fieldName = util.lcFirst(name);\n    if (name === fieldName) name = util.ucFirst(name);\n    skip(\"=\");\n    var id = parseId(next());\n    var type = new Type(name);\n    type.group = true;\n    var field = new Field(fieldName, id, name, rule);\n    field.filename = parse.filename;\n    ifBlock(type, function parseGroup_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(type, token);\n          skip(\";\");\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"message\":\n          parseType(type, token);\n          break;\n        case \"enum\":\n          parseEnum(type, token);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw illegal(token);\n        // there are no groups with proto3 semantics\n      }\n    });\n\n    parent.add(type).add(field);\n  }\n  function parseMapField(parent) {\n    skip(\"<\");\n    var keyType = next();\n\n    /* istanbul ignore if */\n    if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n    skip(\",\");\n    var valueType = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n    skip(\">\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    skip(\"=\");\n    var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n    ifBlock(field, function parseMapField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseMapField_line() {\n      parseInlineOptions(field);\n    });\n    parent.add(field);\n  }\n  function parseOneOf(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var oneof = new OneOf(applyCase(token));\n    ifBlock(oneof, function parseOneOf_block(token) {\n      if (token === \"option\") {\n        parseOption(oneof, token);\n        skip(\";\");\n      } else {\n        push(token);\n        parseField(oneof, \"optional\");\n      }\n    });\n    parent.add(oneof);\n  }\n  function parseEnum(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var enm = new Enum(token);\n    ifBlock(enm, function parseEnum_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(enm, token);\n          skip(\";\");\n          break;\n        case \"reserved\":\n          readRanges(enm.reserved || (enm.reserved = []), true);\n          break;\n        default:\n          parseEnumValue(enm, token);\n      }\n    });\n    parent.add(enm);\n  }\n  function parseEnumValue(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token)) throw illegal(token, \"name\");\n    skip(\"=\");\n    var value = parseId(next(), true),\n      dummy = {\n        options: undefined\n      };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseEnumValue_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseEnumValue_line() {\n      parseInlineOptions(dummy); // skip\n    });\n\n    parent.add(token, value, dummy.comment, dummy.options);\n  }\n  function parseOption(parent, token) {\n    var isCustom = skip(\"(\", true);\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token;\n    var option = name;\n    var propName;\n    if (isCustom) {\n      skip(\")\");\n      name = \"(\" + name + \")\";\n      option = name;\n      token = peek();\n      if (fqTypeRefRe.test(token)) {\n        propName = token.slice(1); //remove '.' before property name\n        name += token;\n        next();\n      }\n    }\n    skip(\"=\");\n    var optionValue = parseOptionValue(parent, name);\n    setParsedOption(parent, option, optionValue, propName);\n  }\n  function parseOptionValue(parent, name) {\n    // { a: \"foo\" b { c: \"bar\" } }\n    if (skip(\"{\", true)) {\n      var objectResult = {};\n      while (!skip(\"}\", true)) {\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next())) {\n          throw illegal(token, \"name\");\n        }\n        var value;\n        var propName = token;\n        skip(\":\", true);\n        if (peek() === \"{\") value = parseOptionValue(parent, name + \".\" + token);else if (peek() === \"[\") {\n          // option (my_option) = {\n          //     repeated_value: [ \"foo\", \"bar\" ]\n          // };\n          value = [];\n          var lastValue;\n          if (skip(\"[\", true)) {\n            do {\n              lastValue = readValue(true);\n              value.push(lastValue);\n            } while (skip(\",\", true));\n            skip(\"]\");\n            if (typeof lastValue !== \"undefined\") {\n              setOption(parent, name + \".\" + token, lastValue);\n            }\n          }\n        } else {\n          value = readValue(true);\n          setOption(parent, name + \".\" + token, value);\n        }\n        var prevValue = objectResult[propName];\n        if (prevValue) value = [].concat(prevValue).concat(value);\n        objectResult[propName] = value;\n\n        // Semicolons and commas can be optional\n        skip(\",\", true);\n        skip(\";\", true);\n      }\n      return objectResult;\n    }\n    var simpleValue = readValue(true);\n    setOption(parent, name, simpleValue);\n    return simpleValue;\n    // Does not enforce a delimiter to be universal\n  }\n\n  function setOption(parent, name, value) {\n    if (parent.setOption) parent.setOption(name, value);\n  }\n  function setParsedOption(parent, name, value, propName) {\n    if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n  }\n  function parseInlineOptions(parent) {\n    if (skip(\"[\", true)) {\n      do {\n        parseOption(parent, \"option\");\n      } while (skip(\",\", true));\n      skip(\"]\");\n    }\n    return parent;\n  }\n  function parseService(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n    var service = new Service(token);\n    ifBlock(service, function parseService_block(token) {\n      if (parseCommon(service, token)) return;\n\n      /* istanbul ignore else */\n      if (token === \"rpc\") parseMethod(service, token);else throw illegal(token);\n    });\n    parent.add(service);\n  }\n  function parseMethod(parent, token) {\n    // Get the comment of the preceding line now (if one exists) in case the\n    // method is defined across multiple lines.\n    var commentText = cmnt();\n    var type = token;\n\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token,\n      requestType,\n      requestStream,\n      responseType,\n      responseStream;\n    skip(\"(\");\n    if (skip(\"stream\", true)) requestStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    requestType = token;\n    skip(\")\");\n    skip(\"returns\");\n    skip(\"(\");\n    if (skip(\"stream\", true)) responseStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    responseType = token;\n    skip(\")\");\n    var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n    method.comment = commentText;\n    ifBlock(method, function parseMethod_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(method, token);\n        skip(\";\");\n      } else throw illegal(token);\n    });\n    parent.add(method);\n  }\n  function parseExtension(parent, token) {\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n    var reference = token;\n    ifBlock(null, function parseExtension_block(token) {\n      switch (token) {\n        case \"required\":\n        case \"repeated\":\n          parseField(parent, token, reference);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(parent, \"proto3_optional\", reference);\n          } else {\n            parseField(parent, \"optional\", reference);\n          }\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(parent, \"optional\", reference);\n          break;\n      }\n    });\n  }\n  var token;\n  while ((token = next()) !== null) {\n    switch (token) {\n      case \"package\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parsePackage();\n        break;\n      case \"import\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseImport();\n        break;\n      case \"syntax\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseSyntax();\n        break;\n      case \"option\":\n        parseOption(ptr, token);\n        skip(\";\");\n        break;\n      default:\n        /* istanbul ignore else */\n        if (parseCommon(ptr, token)) {\n          head = false;\n          continue;\n        }\n\n        /* istanbul ignore next */\n        throw illegal(token);\n    }\n  }\n  parse.filename = null;\n  return {\n    \"package\": pkg,\n    \"imports\": imports,\n    weakImports: weakImports,\n    syntax: syntax,\n    root: root\n  };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */","map":{"version":3,"names":["module","exports","parse","filename","defaults","keepCase","tokenize","require","Root","Type","Field","MapField","OneOf","Enum","Service","Method","types","util","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","source","root","options","preferTrailingComment","tn","alternateCommentMode","next","push","peek","skip","cmnt","head","pkg","imports","weakImports","syntax","isProto3","ptr","applyCase","name","camelCase","illegal","token","insideTryCatch","Error","line","readString","values","join","readValue","acceptTypeRef","parseNumber","e","test","readRanges","target","acceptStrings","start","parseId","sign","charAt","substring","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","undefined","define","parseImport","whichImports","parseSyntax","parseCommon","parent","parseOption","parseType","parseEnum","parseService","parseExtension","ifBlock","obj","fnIf","fnElse","trailingLine","comment","type","parseType_block","parseMapField","parseField","parseOneOf","extensions","reserved","add","rule","extend","parseGroup","field","parseField_block","parseField_line","parseInlineOptions","oneof","setOption","repeated","packed","basic","fieldName","lcFirst","ucFirst","id","group","parseGroup_block","keyType","mapKey","valueType","parseMapField_block","parseMapField_line","parseOneOf_block","enm","parseEnum_block","parseEnumValue","value","dummy","parseEnumValue_block","parseEnumValue_line","isCustom","option","propName","slice","optionValue","parseOptionValue","setParsedOption","objectResult","lastValue","prevValue","concat","simpleValue","service","parseService_block","parseMethod","commentText","requestType","requestStream","responseType","responseStream","method","parseMethod_block","reference","parseExtension_block"],"sources":["/Users/kamilgeagea/Developer/competitions/conuhacks-client/node_modules/protobufjs/src/parse.js"],"sourcesContent":["\"use strict\";\nmodule.exports = parse;\n\nparse.filename = null;\nparse.defaults = { keepCase: false };\n\nvar tokenize  = require(\"./tokenize\"),\n    Root      = require(\"./root\"),\n    Type      = require(\"./type\"),\n    Field     = require(\"./field\"),\n    MapField  = require(\"./mapfield\"),\n    OneOf     = require(\"./oneof\"),\n    Enum      = require(\"./enum\"),\n    Service   = require(\"./service\"),\n    Method    = require(\"./method\"),\n    types     = require(\"./types\"),\n    util      = require(\"./util\");\n\nvar base10Re    = /^[1-9][0-9]*$/,\n    base10NegRe = /^-?[1-9][0-9]*$/,\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n    base8Re     = /^0[0-7]+$/,\n    base8NegRe  = /^-?0[0-7]+$/,\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n    /* eslint-disable callback-return */\n    if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n    }\n    if (!options)\n        options = parse.defaults;\n\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false),\n        next = tn.next,\n        push = tn.push,\n        peek = tn.peek,\n        skip = tn.skip,\n        cmnt = tn.cmnt;\n\n    var head = true,\n        pkg,\n        imports,\n        weakImports,\n        syntax,\n        isProto3 = false;\n\n    var ptr = root;\n\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\n\n    /* istanbul ignore next */\n    function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch)\n            parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n\n    function readString() {\n        var values = [],\n            token;\n        do {\n            /* istanbul ignore if */\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\n                throw illegal(token);\n\n            values.push(next());\n            skip(token);\n            token = peek();\n        } while (token === \"\\\"\" || token === \"'\");\n        return values.join(\"\");\n    }\n\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch (token) {\n            case \"'\":\n            case \"\\\"\":\n                push(token);\n                return readString();\n            case \"true\": case \"TRUE\":\n                return true;\n            case \"false\": case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n\n            /* istanbul ignore else */\n            if (acceptTypeRef && typeRefRe.test(token))\n                return token;\n\n            /* istanbul ignore next */\n            throw illegal(token, \"value\");\n        }\n    }\n\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\n                target.push(readString());\n            else\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\n        } while (skip(\",\", true));\n        skip(\";\");\n    }\n\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch (token) {\n            case \"inf\": case \"INF\": case \"Inf\":\n                return sign * Infinity;\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token))\n            return sign * parseInt(token, 10);\n        if (base16Re.test(token))\n            return sign * parseInt(token, 16);\n        if (base8Re.test(token))\n            return sign * parseInt(token, 8);\n\n        /* istanbul ignore else */\n        if (numberRe.test(token))\n            return sign * parseFloat(token);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"number\", insideTryCatch);\n    }\n\n    function parseId(token, acceptNegative) {\n        switch (token) {\n            case \"max\": case \"MAX\": case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n\n        /* istanbul ignore if */\n        if (!acceptNegative && token.charAt(0) === \"-\")\n            throw illegal(token, \"id\");\n\n        if (base10NegRe.test(token))\n            return parseInt(token, 10);\n        if (base16NegRe.test(token))\n            return parseInt(token, 16);\n\n        /* istanbul ignore else */\n        if (base8NegRe.test(token))\n            return parseInt(token, 8);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"id\");\n    }\n\n    function parsePackage() {\n\n        /* istanbul ignore if */\n        if (pkg !== undefined)\n            throw illegal(\"package\");\n\n        pkg = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(pkg))\n            throw illegal(pkg, \"name\");\n\n        ptr = ptr.define(pkg);\n        skip(\";\");\n    }\n\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch (token) {\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n                // eslint-disable-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n\n    function parseSyntax() {\n        skip(\"=\");\n        syntax = readString();\n        isProto3 = syntax === \"proto3\";\n\n        /* istanbul ignore if */\n        if (!isProto3 && syntax !== \"proto2\")\n            throw illegal(syntax, \"syntax\");\n\n        skip(\";\");\n    }\n\n    function parseCommon(parent, token) {\n        switch (token) {\n\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n\n            case \"message\":\n                parseType(parent, token);\n                return true;\n\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n\n            case \"service\":\n                parseService(parent, token);\n                return true;\n\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if(typeof obj.comment !== \"string\") {\n              obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while ((token = next()) !== \"}\")\n                fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse)\n                fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n\n    function parseType(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"type name\");\n\n        var type = new Type(token);\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token))\n                return;\n\n            switch (token) {\n\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n    }\n\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(type))\n            throw illegal(type, \"type\");\n\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        name = applyCase(name);\n        skip(\"=\");\n\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        ifBlock(field, function parseField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n\n        if (rule === \"proto3_optional\") {\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n            var oneof = new OneOf(\"_\" + name);\n            field.setOption(\"proto3_optional\", true);\n            oneof.add(field);\n            parent.add(oneof);\n        } else {\n            parent.add(field);\n        }\n\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\n        // all known packable types and anything that could be an enum (= is not a basic type).\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\n    }\n\n    function parseGroup(parent, rule) {\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName)\n            name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch (token) {\n\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n\n                case \"message\":\n                    parseType(type, token);\n                    break;\n\n                case \"enum\":\n                    parseEnum(type, token);\n                    break;\n\n                /* istanbul ignore next */\n                default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type)\n              .add(field);\n    }\n\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n\n        /* istanbul ignore if */\n        if (types.mapKey[keyType] === undefined)\n            throw illegal(keyType, \"type\");\n\n        skip(\",\");\n        var valueType = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(valueType))\n            throw illegal(valueType, \"type\");\n\n        skip(\">\");\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        ifBlock(field, function parseMapField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n\n    function parseOneOf(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var oneof = new OneOf(applyCase(token));\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n\n    function parseEnum(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var enm = new Enum(token);\n        ifBlock(enm, function parseEnum_block(token) {\n          switch(token) {\n            case \"option\":\n              parseOption(enm, token);\n              skip(\";\");\n              break;\n\n            case \"reserved\":\n              readRanges(enm.reserved || (enm.reserved = []), true);\n              break;\n\n            default:\n              parseEnumValue(enm, token);\n          }\n        });\n        parent.add(enm);\n    }\n\n    function parseEnumValue(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token))\n            throw illegal(token, \"name\");\n\n        skip(\"=\");\n        var value = parseId(next(), true),\n            dummy = {\n                options: undefined\n            };\n        dummy.setOption = function(name, value) {\n            if (this.options === undefined)\n                this.options = {};\n            this.options[name] = value;\n        };\n        ifBlock(dummy, function parseEnumValue_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment, dummy.options);\n    }\n\n    function parseOption(parent, token) {\n        var isCustom = skip(\"(\", true);\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token;\n        var option = name;\n        var propName;\n\n        if (isCustom) {\n            skip(\")\");\n            name = \"(\" + name + \")\";\n            option = name;\n            token = peek();\n            if (fqTypeRefRe.test(token)) {\n                propName = token.slice(1); //remove '.' before property name\n                name += token;\n                next();\n            }\n        }\n        skip(\"=\");\n        var optionValue = parseOptionValue(parent, name);\n        setParsedOption(parent, option, optionValue, propName);\n    }\n\n    function parseOptionValue(parent, name) {\n        // { a: \"foo\" b { c: \"bar\" } }\n        if (skip(\"{\", true)) {\n            var objectResult = {};\n\n            while (!skip(\"}\", true)) {\n                /* istanbul ignore if */\n                if (!nameRe.test(token = next())) {\n                    throw illegal(token, \"name\");\n                }\n\n                var value;\n                var propName = token;\n\n                skip(\":\", true);\n\n                if (peek() === \"{\")\n                    value = parseOptionValue(parent, name + \".\" + token);\n                else if (peek() === \"[\") {\n                    // option (my_option) = {\n                    //     repeated_value: [ \"foo\", \"bar\" ]\n                    // };\n                    value = [];\n                    var lastValue;\n                    if (skip(\"[\", true)) {\n                        do {\n                            lastValue = readValue(true);\n                            value.push(lastValue);\n                        } while (skip(\",\", true));\n                        skip(\"]\");\n                        if (typeof lastValue !== \"undefined\") {\n                            setOption(parent, name + \".\" + token, lastValue);\n                        }\n                    }\n                } else {\n                    value = readValue(true);\n                    setOption(parent, name + \".\" + token, value);\n                }\n\n                var prevValue = objectResult[propName];\n\n                if (prevValue)\n                    value = [].concat(prevValue).concat(value);\n\n                objectResult[propName] = value;\n\n                // Semicolons and commas can be optional\n                skip(\",\", true);\n                skip(\";\", true);\n            }\n\n            return objectResult;\n        }\n\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n        // Does not enforce a delimiter to be universal\n    }\n\n    function setOption(parent, name, value) {\n        if (parent.setOption)\n            parent.setOption(name, value);\n    }\n\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption)\n            parent.setParsedOption(name, value, propName);\n    }\n\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            } while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n\n    function parseService(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"service name\");\n\n        var service = new Service(token);\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token))\n                return;\n\n            /* istanbul ignore else */\n            if (token === \"rpc\")\n                parseMethod(service, token);\n            else\n                throw illegal(token);\n        });\n        parent.add(service);\n    }\n\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n\n        var type = token;\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token,\n            requestType, requestStream,\n            responseType, responseStream;\n\n        skip(\"(\");\n        if (skip(\"stream\", true))\n            requestStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        requestType = token;\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\n        if (skip(\"stream\", true))\n            responseStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        responseType = token;\n        skip(\")\");\n\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        });\n        parent.add(method);\n    }\n\n    function parseExtension(parent, token) {\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"reference\");\n\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch (token) {\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(parent, token, reference);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(parent, \"proto3_optional\", reference);\n                    } else {\n                        parseField(parent, \"optional\", reference);\n                    }\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n\n    var token;\n    while ((token = next()) !== null) {\n        switch (token) {\n\n            case \"package\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parsePackage();\n                break;\n\n            case \"import\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseImport();\n                break;\n\n            case \"syntax\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseSyntax();\n                break;\n\n            case \"option\":\n\n                parseOption(ptr, token);\n                skip(\";\");\n                break;\n\n            default:\n\n                /* istanbul ignore else */\n                if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n\n                /* istanbul ignore next */\n                throw illegal(token);\n        }\n    }\n\n    parse.filename = null;\n    return {\n        \"package\"     : pkg,\n        \"imports\"     : imports,\n         weakImports  : weakImports,\n         syntax       : syntax,\n         root         : root\n    };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}