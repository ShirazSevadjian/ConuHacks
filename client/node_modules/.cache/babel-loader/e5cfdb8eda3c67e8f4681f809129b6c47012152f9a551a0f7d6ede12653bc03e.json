{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = require(\"protobufjs\");\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nclass GoogleError extends Error {\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {\n      // ignoring the error\n    }\n    return err;\n  }\n  // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static parseHttpError(json) {\n    if (Array.isArray(json)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      json = json.find(obj => {\n        return 'error' in obj;\n      });\n    }\n    // fallback logic.\n    // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n    // google error mapping: https://cloud.google.com/apis/design/errors\n    // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n    if (!json['error']) {\n      json['error'] = {};\n      Object.keys(json).filter(key => key !== 'error').forEach(key => {\n        json['error'][key] = json[key];\n        delete json[key];\n      });\n    }\n    const decoder = new GoogleErrorDecoder();\n    const proto3Error = decoder.decodeHTTPError(json['error']);\n    const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n    // Map Http Status Code to gRPC Status Code\n    if (json['error']['code']) {\n      error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n    } else {\n      // If error code is absent, proto3 message default value is 0. We should\n      // keep error code as undefined.\n      delete error.code;\n    }\n    // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"details\" to \"statusDetails\".\n    if (error.details) {\n      try {\n        const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          error.statusDetails = statusDetailsObj.details;\n        }\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          error.reason = statusDetailsObj.errorInfo.reason;\n          error.domain = statusDetailsObj.errorInfo.domain;\n          // error.metadata has been occupied for gRPC metadata, so we use\n          // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n          // consistency with gRPC ErrorInfo metadata field name.\n          error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      } catch (decodeErr) {\n        // ignoring the error\n      }\n    }\n    return error;\n  }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../build/protos/status.json');\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n    return type.decode(anyValue.value);\n  }\n  // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array);\n    // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n    const details = [];\n    let errorInfo;\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {\n        // cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n      domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n      errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n    };\n    return result;\n  }\n  // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new GoogleError(status.message), status);\n  }\n  // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  }\n  // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {\n          // cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  }\n  // Decodes http error which is an instance of google.rpc.Status.\n  decodeHTTPError(json) {\n    const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n    if (!errorMessage) {\n      throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n    }\n    return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n  }\n  // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n  decodeHttpStatusDetails(rawDetails) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const details = [];\n    let errorInfo;\n    for (const detail of rawDetails) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {\n        // cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n    return {\n      details,\n      errorInfo\n    };\n  }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"mappings":"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","names":["GoogleError","Error","parseGRPCStatusDetails","err","decoder","GoogleErrorDecoder","metadata","get","statusDetailsObj","decodeGRPCStatusDetails","details","length","statusDetails","errorInfo","reason","domain","errorInfoMetadata","decodeErr","parseHttpError","json","Array","isArray","find","obj","Object","keys","filter","key","forEach","proto3Error","decodeHTTPError","error","assign","code","decodeHttpStatusDetails","exports","constructor","errorProtoJson","require","root","protobuf","Root","fromJSON","anyType","lookupType","statusType","decodeProtobufAny","anyValue","match","type_url","typeName","type","decode","value","decodeRpcStatus","buffer","uint8array","Uint8Array","status","detail","decodedDetail","push","result","message","callErrorFromStatus","status_1","decodeErrorFromBuffer","bufferArr","rpcStatus","errorMessage","serializer","fromProto3JSON","toObject","fallback_1","rawDetails"],"sources":["../../src/googleError.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}