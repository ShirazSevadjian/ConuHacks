{"ast":null,"code":"\"use strict\";\n\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.call = void 0;\nconst fs = require(\"fs\");\nconst is = require(\"is\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _requestToObject = request => {\n  if (is.string(request)) {\n    // Is this a URL or a local file?\n    // Guess based on what the string looks like, and build the full\n    // request object in the correct format.\n    if (request.indexOf('://') === -1 || request.indexOf('file://') === 0) {\n      request = {\n        image: {\n          source: {\n            filename: request\n          }\n        }\n      };\n    } else {\n      request = {\n        image: {\n          source: {\n            imageUri: request\n          }\n        }\n      };\n    }\n  } else if (Buffer.isBuffer(request)) {\n    // Drop the buffer one level lower; it will get dealt with later\n    // in the function. This allows sending <Buffer> and {image: <Buffer>} to\n    // both work identically.\n    request = {\n      image: request\n    };\n  }\n  return request;\n};\nconst _coerceRequest = (request, callback) => {\n  // At this point, request must be an object with an `image` key; if not,\n  // it is an error. If there is no image, throw an exception.\n  if (!is.object(request) || is.undefined(request.image)) {\n    return callback(new Error('No image present.'));\n  }\n  // If this is a buffer, read it and send the object\n  // that the Vision API expects.\n  if (Buffer.isBuffer(request.image)) {\n    request.image = {\n      content: request.image.toString('base64')\n    };\n  }\n  // If the file is specified as a filename and exists on disk, read it\n  // and coerce it into the base64 content.\n  if (request.image.source && request.image.source.filename) {\n    fs.readFile(request.image.source.filename, (err, blob) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      request.image.content = blob.toString('base64');\n      delete request.image.source;\n      return callback(null, request);\n    });\n  } else {\n    return callback(null, request);\n  }\n};\nconst _createSingleFeatureMethod = featureValue => {\n  return function (request, callOptionsOrCallback, callback) {\n    // confidence check: If we got a string or buffer, we need this to be\n    // in object form now, so we can tack on the features list.\n    //\n    // Do the minimum required conversion, which can also be guaranteed to\n    // be synchronous (e.g. no file loading yet; that is handled by\n    // annotateImage later.\n    const annotateImageRequest = _requestToObject(request);\n    // If a callback was provided and options were skipped, normalize\n    // the argument names.\n    let callOptions;\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    }\n    // Add the feature to the request.\n    annotateImageRequest.features = annotateImageRequest.features || [{\n      type: featureValue\n    }];\n    // If the user submitted explicit features that do not line up with\n    // the precise method called, throw an exception.\n    for (const feature of annotateImageRequest.features) {\n      if (feature.type !== featureValue) {\n        throw new Error('Setting explicit features is not supported on this method. ' + 'Use the #annotateImage method instead.');\n      }\n    }\n    // Call the underlying #annotateImage method.\n    return this.annotateImage(annotateImageRequest, callOptions, callback);\n  };\n};\nfunction call(apiVersion) {\n  const methods = {};\n  /**\n   * Annotate a single image with the requested features.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#annotateImage\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object[]} request.features An array of the specific annotation\n   *     features being requested. This should take a form such as:\n   *\n   *         [{type: vision.types.Feature.Type.FACE_DETECTION},\n   *         {type: vision.types.Feature.Type.WEB_DETECTION}]\n   *\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n   *   features: [],\n   * };\n   * client\n   *   .annotateImage(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.annotateImage = (0, promisify_1.promisify)(function (request, callOptionsOrCallback, callback) {\n    // If a callback was provided and options were skipped, normalize\n    // the argument names.\n    let callOptions;\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    }\n    // If we got a filename for the image, open the file and transform\n    // it to content.\n    return _coerceRequest(request, (err, req) => {\n      if (err) {\n        return callback(err);\n      }\n      // Call the GAPIC batch annotation function.\n      const requests = {\n        requests: [req]\n      };\n      return this.batchAnnotateImages(requests, callOptions, (err, r) => {\n        // If there is an error, handle it.\n        if (err) {\n          return callback(err);\n        }\n        // We are guaranteed to only have one response element, since we\n        // only sent one image.\n        const response = r.responses[0];\n        // Fire the callback if applicable.\n        return callback(undefined, response);\n      });\n    });\n  });\n  const protoFilesRoot = gax.protobuf.Root.fromJSON(\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('../protos/protos.json'));\n  const features = protoFilesRoot.lookup(`google.cloud.vision.${apiVersion}.Feature.Type`).values;\n  /**\n   * Annotate a single image with face detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#faceDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .faceDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.faceDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.FACE_DETECTION));\n  /**\n   * Annotate a single image with landmark detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#landmarkDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .landmarkDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.landmarkDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LANDMARK_DETECTION));\n  /**\n   * Annotate a single image with logo detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#logoDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .logoDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.logoDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LOGO_DETECTION));\n  /**\n   * Annotate a single image with label detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#labelDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .labelDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.labelDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LABEL_DETECTION));\n  /**\n   * Annotate a single image with text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#textDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .textDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.textDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.TEXT_DETECTION));\n  /**\n   * Annotate a single image with document text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#documentTextDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .documentTextDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.documentTextDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.DOCUMENT_TEXT_DETECTION));\n  /**\n   * Annotate a single image with safe search detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#safeSearchDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .safeSearchDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.safeSearchDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.SAFE_SEARCH_DETECTION));\n  /**\n   * Annotate a single image with image properties.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#imageProperties\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .imageProperties(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.imageProperties = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.IMAGE_PROPERTIES));\n  /**\n   * Annotate a single image with crop hints.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#cropHints\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .cropHints(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.cropHints = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.CROP_HINTS));\n  /**\n   * Annotate a single image with web detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#webDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .webDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.webDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.WEB_DETECTION));\n  /**\n   * Annotate a single image with the result from Product Search.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#productSearch\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1p3beta1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .productSearch(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  if (features.PRODUCT_SEARCH !== undefined) {\n    methods.productSearch = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.PRODUCT_SEARCH));\n  }\n  /**\n   * Annotate a single image with localization vectors.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#objectLocalization\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * // Object localization is only available in v1p3beta1.\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .objectLocalization(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  if (features.OBJECT_LOCALIZATION !== undefined) {\n    methods.objectLocalization = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.OBJECT_LOCALIZATION));\n  }\n  return methods;\n}\nexports.call = call;","map":{"version":3,"mappings":"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","names":["_requestToObject","request","is","string","indexOf","image","source","filename","imageUri","Buffer","isBuffer","_coerceRequest","callback","object","undefined","Error","content","toString","fs","readFile","err","blob","_createSingleFeatureMethod","featureValue","callOptionsOrCallback","annotateImageRequest","callOptions","function","features","type","feature","annotateImage","call","apiVersion","methods","req","requests","batchAnnotateImages","r","response","responses","protoFilesRoot","gax","protobuf","Root","fromJSON","require","lookup","values","faceDetection","FACE_DETECTION","landmarkDetection","LANDMARK_DETECTION","logoDetection","LOGO_DETECTION","labelDetection","LABEL_DETECTION","textDetection","TEXT_DETECTION","documentTextDetection","DOCUMENT_TEXT_DETECTION","safeSearchDetection","SAFE_SEARCH_DETECTION","imageProperties","IMAGE_PROPERTIES","cropHints","CROP_HINTS","webDetection","WEB_DETECTION","PRODUCT_SEARCH","productSearch","OBJECT_LOCALIZATION","objectLocalization","exports"],"sources":["../../src/helpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}